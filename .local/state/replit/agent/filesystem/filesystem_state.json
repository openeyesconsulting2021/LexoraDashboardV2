{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive legal office management system built with modern web technologies. The application provides a complete solution for managing legal cases, clients, documents, tasks, and users in a law firm environment. The system features a bilingual interface with Arabic RTL support and role-based access control for administrators, lawyers, and secretaries.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client uses a modern React-based architecture with TypeScript for type safety. The application is built with Vite for fast development and optimized production builds. The UI leverages Radix UI components styled with shadcn/ui design system and Tailwind CSS for responsive styling. State management is handled through TanStack Query (React Query) for server state, with React Hook Form and Zod for form validation. Client-side routing is implemented using Wouter for lightweight navigation.\n\n## Backend Architecture\nThe server runs on Node.js with Express.js framework, utilizing TypeScript and ES modules. The RESTful API design includes comprehensive CRUD operations for all entities (users, clients, cases, tasks, documents). Authentication is implemented using Passport.js with local strategy and session-based authentication. File uploads are handled through Multer middleware with disk storage configuration. The server includes role-based access control middleware and audit logging capabilities.\n\n## Database Architecture\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations and schema management. The database schema includes comprehensive tables for users, clients, cases, tasks, documents, and audit logs with proper relationships and constraints. Database migrations are managed through Drizzle Kit, and the system is configured to work with Neon serverless PostgreSQL.\n\n## Authentication & Authorization\nThe system implements session-based authentication with encrypted password storage using Node.js crypto module. Role-based access control supports three user types: admin, lawyer, and secretary, each with appropriate permissions. Session management includes memory store for development with configurable session expiry and security settings.\n\n## File Management\nDocument management includes support for multiple file types (PDF, DOC, DOCX, TXT, images) with file size limits and type validation. Files are stored locally with unique naming conventions and organized by upload date. The system includes document categorization by type and association with cases or clients.\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: PostgreSQL serverless database hosting\n- **Drizzle ORM**: Type-safe database operations and migrations\n\n## UI & Styling Libraries\n- **Radix UI**: Headless UI component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built component system\n- **Lucide React**: Icon library\n\n## State Management & Data Fetching\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management\n- **Zod**: Schema validation\n\n## Authentication & Security\n- **Passport.js**: Authentication middleware\n- **Express Session**: Session management\n- **bcrypt/crypto**: Password hashing and encryption\n\n## File Handling\n- **Multer**: File upload middleware\n- **File System**: Local file storage\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type safety\n- **ESLint**: Code linting\n- **PostCSS**: CSS processing\n\n## Date & Internationalization\n- **date-fns**: Date formatting and manipulation with Arabic locale support","size_bytes":3723},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n          50: '#eff6ff',\n          100: '#dbeafe',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8'\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n        slate: {\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          500: '#64748b',\n          700: '#334155',\n          800: '#1e293b',\n          900: '#0f172a'\n        }\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3166},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/replit_1755097535862.md":{"content":"# Legal Office Management System\n\n## Overview\n\nThis is a comprehensive legal office management system built with modern web technologies. The application provides a complete solution for managing legal cases, clients, documents, tasks, and users in a law office environment. It features a full-stack architecture with a React frontend and Express backend, using PostgreSQL for data persistence.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Library**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with custom theme variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Language Support**: Right-to-left (RTL) Arabic interface\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL\n- **Authentication**: JWT-based authentication with bcrypt password hashing\n- **File Upload**: Multer middleware for document management\n- **API Design**: RESTful API with role-based access control\n\n### Database Architecture\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Schema Management**: Drizzle ORM with migration support\n- **Connection**: Connection pooling with @neondatabase/serverless\n\n## Key Components\n\n### Authentication & Authorization\n- JWT token-based authentication\n- Role-based access control (admin, lawyer, secretary)\n- Middleware for protected routes\n- Session management with automatic token refresh\n\n### User Management\n- Multi-role user system (admin, lawyer, secretary)\n- User activation/deactivation\n- Profile management\n- Audit logging for user activities\n\n### Case Management\n- Case creation and tracking\n- Case status management (active, pending, closed)\n- Priority levels (low, medium, high, urgent)\n- Court information tracking\n- Client and lawyer assignment\n\n### Client Management\n- Client registration and profiles\n- Contact information management\n- Case history tracking\n- Document association\n\n### Document Management\n- File upload and storage\n- Document categorization\n- Case and client association\n- File type validation and size limits\n- Download and preview capabilities\n\n### Task Management\n- Task creation and assignment\n- Due date tracking\n- Priority management\n- Status updates (pending, in-progress, completed)\n- Case association\n\n### Audit System\n- Comprehensive audit logging\n- User activity tracking\n- Data change history\n- System monitoring\n\n## Data Flow\n\n### Authentication Flow\n1. User submits credentials via login form\n2. Backend validates credentials against database\n3. JWT token generated and returned to client\n4. Token stored in localStorage and used for subsequent requests\n5. Middleware validates token on protected routes\n\n### CRUD Operations Flow\n1. Client initiates request through React components\n2. TanStack Query manages request state and caching\n3. API requests sent to Express backend with authentication\n4. Backend validates permissions and processes request\n5. Drizzle ORM handles database operations\n6. Response returned to client with updated data\n7. UI updates automatically through reactive queries\n\n### File Upload Flow\n1. User selects files through document modal\n2. Files validated on client-side for type and size\n3. FormData sent to backend via multipart/form-data\n4. Multer middleware processes file upload\n5. Files stored in uploads directory\n6. Database records created with file metadata\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Components**: @radix-ui/* for accessible components\n- **State Management**: @tanstack/react-query for server state\n- **Form Handling**: react-hook-form with @hookform/resolvers\n- **Validation**: zod for schema validation\n- **Styling**: tailwindcss with class-variance-authority\n- **Icons**: lucide-react for consistent iconography\n- **Development**: @replit/vite-plugin-* for Replit integration\n\n### Backend Dependencies\n- **Database**: @neondatabase/serverless for PostgreSQL connection\n- **ORM**: drizzle-orm with drizzle-kit for schema management\n- **Authentication**: jsonwebtoken and bcrypt for security\n- **File Upload**: multer for handling multipart/form-data\n- **Development**: tsx for TypeScript execution\n\n### Build Tools\n- **Bundling**: Vite for frontend, esbuild for backend\n- **TypeScript**: Full TypeScript support across the stack\n- **Development**: Hot module replacement and file watching\n\n## Deployment Strategy\n\n### Production Build\n- Frontend built with Vite to optimized static assets\n- Backend compiled with esbuild for Node.js execution\n- TypeScript compiled to JavaScript with module resolution\n- Assets served statically in production\n\n### Database Setup\n- Drizzle migrations for schema deployment\n- Environment-based configuration\n- Connection pooling for production scalability\n\n### Environment Configuration\n- DATABASE_URL for PostgreSQL connection\n- JWT_SECRET for token signing\n- NODE_ENV for environment-specific behavior\n- File upload directory configuration\n\n### Development Workflow\n- Hot reload for both frontend and backend\n- Automatic TypeScript compilation\n- Database schema synchronization\n- Integrated development server with proxy\n\nThe system is designed to be scalable, maintainable, and user-friendly, with a focus on providing a comprehensive solution for legal office management while maintaining high security standards and performance.","size_bytes":5700},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport MemoryStore from \"memorystore\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\nconst MemoryStoreSession = MemoryStore(session);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"fallback-secret-key-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000,\n    }),\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 // 24 hours\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy({ usernameField: \"email\" }, async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        }\n        if (!user.isActive) {\n          return done(null, false);\n        }\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user || false);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, fullName, username, role = \"secretary\" } = req.body;\n      \n      if (!email || !password || !fullName || !username) {\n        return res.status(400).json({ message: \"جميع الحقول مطلوبة\" });\n      }\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"البريد الإلكتروني مستخدم بالفعل\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"اسم المستخدم مستخدم بالفعل\" });\n      }\n\n      const user = await storage.createUser({\n        email,\n        username,\n        fullName,\n        role: role as \"admin\" | \"lawyer\" | \"secretary\",\n        password: await hashPassword(password),\n        isActive: true,\n      });\n\n      await storage.createAuditLog({\n        userId: user.id,\n        action: \"user_registered\",\n        tableName: \"users\",\n        recordId: user.id,\n        newValues: JSON.stringify({ email: user.email, fullName: user.fullName, role: user.role }),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({ \n          id: user.id, \n          email: user.email, \n          fullName: user.fullName, \n          username: user.username,\n          role: user.role,\n          isActive: user.isActive \n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), async (req, res) => {\n    await storage.createAuditLog({\n      userId: req.user!.id,\n      action: \"user_login\",\n      tableName: \"users\",\n      recordId: req.user!.id,\n      ipAddress: req.ip,\n      userAgent: req.get(\"User-Agent\"),\n    });\n\n    res.status(200).json({\n      id: req.user!.id,\n      email: req.user!.email,\n      fullName: req.user!.fullName,\n      username: req.user!.username,\n      role: req.user!.role,\n      isActive: req.user!.isActive,\n    });\n  });\n\n  app.post(\"/api/logout\", async (req, res, next) => {\n    if (req.user) {\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"user_logout\",\n        tableName: \"users\",\n        recordId: req.user.id,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n    }\n\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json({\n      id: req.user!.id,\n      email: req.user!.email,\n      fullName: req.user!.fullName,\n      username: req.user!.username,\n      role: req.user!.role,\n      isActive: req.user!.isActive,\n    });\n  });\n}\n","size_bytes":5323},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { \n  insertClientSchema, \n  insertCaseSchema, \n  insertTaskSchema, \n  insertDocumentSchema \n} from \"@shared/schema\";\n\n// Ensure uploads directory exists\nconst uploadsDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\n\n// Multer configuration for file uploads\nconst storage_multer = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadsDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({ \n  storage: storage_multer,\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n  fileFilter: (req, file, cb) => {\n    // Allow common document formats\n    const allowedTypes = /\\.(pdf|doc|docx|txt|jpg|jpeg|png)$/i;\n    if (allowedTypes.test(file.originalname)) {\n      cb(null, true);\n    } else {\n      cb(new Error('نوع الملف غير مدعوم'));\n    }\n  }\n});\n\n// Authentication middleware\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"غير مصرح\" });\n  }\n  next();\n}\n\nfunction requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"غير مصرح\" });\n    }\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"ليس لديك صلاحية\" });\n    }\n    next();\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب الإحصائيات\" });\n    }\n  });\n\n  // Clients routes\n  app.get(\"/api/clients\", requireAuth, async (req, res) => {\n    try {\n      const { search } = req.query;\n      const clients = search \n        ? await storage.searchClients(search as string)\n        : await storage.getClients();\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب العملاء\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", requireAuth, async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"العميل غير موجود\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب العميل\" });\n    }\n  });\n\n  app.post(\"/api/clients\", requireAuth, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n      \n      const clientData = insertClientSchema.parse({\n        ...req.body,\n        createdBy: req.user.id\n      });\n      const client = await storage.createClient(clientData);\n      \n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"client_created\",\n        tableName: \"clients\",\n        recordId: client.id,\n        newValues: JSON.stringify(client),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(client);\n    } catch (error) {\n      res.status(400).json({ message: \"بيانات العميل غير صحيحة\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", requireAuth, async (req, res) => {\n    try {\n      const existingClient = await storage.getClient(req.params.id);\n      if (!existingClient) {\n        return res.status(404).json({ message: \"العميل غير موجود\" });\n      }\n\n      const clientData = insertClientSchema.partial().parse(req.body);\n      const updatedClient = await storage.updateClient(req.params.id, clientData);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"client_updated\",\n        tableName: \"clients\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(existingClient),\n        newValues: JSON.stringify(updatedClient),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(updatedClient);\n    } catch (error) {\n      res.status(400).json({ message: \"بيانات العميل غير صحيحة\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", requireAuth, async (req, res) => {\n    try {\n      const existingClient = await storage.getClient(req.params.id);\n      if (!existingClient) {\n        return res.status(404).json({ message: \"العميل غير موجود\" });\n      }\n\n      await storage.deleteClient(req.params.id);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"client_deleted\",\n        tableName: \"clients\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(existingClient),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.sendStatus(204);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في حذف العميل\" });\n    }\n  });\n\n  // Cases routes\n  app.get(\"/api/cases\", requireAuth, async (req, res) => {\n    try {\n      const { search, client, lawyer } = req.query;\n      let cases;\n      \n      if (search) {\n        cases = await storage.searchCases(search as string);\n      } else if (client) {\n        cases = await storage.getCasesByClient(client as string);\n      } else if (lawyer) {\n        cases = await storage.getCasesByLawyer(lawyer as string);\n      } else {\n        cases = await storage.getCases();\n      }\n      \n      res.json(cases);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب القضايا\" });\n    }\n  });\n\n  app.get(\"/api/cases/:id\", requireAuth, async (req, res) => {\n    try {\n      const caseData = await storage.getCase(req.params.id);\n      if (!caseData) {\n        return res.status(404).json({ message: \"القضية غير موجودة\" });\n      }\n      res.json(caseData);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب القضية\" });\n    }\n  });\n\n  app.post(\"/api/cases\", requireAuth, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n      \n      const caseData = insertCaseSchema.parse({\n        ...req.body,\n        createdBy: req.user.id\n      });\n      const newCase = await storage.createCase(caseData);\n      \n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"case_created\",\n        tableName: \"cases\",\n        recordId: newCase.id,\n        newValues: JSON.stringify(newCase),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(newCase);\n    } catch (error) {\n      res.status(400).json({ message: \"بيانات القضية غير صحيحة\" });\n    }\n  });\n\n  app.put(\"/api/cases/:id\", requireAuth, async (req, res) => {\n    try {\n      const existingCase = await storage.getCase(req.params.id);\n      if (!existingCase) {\n        return res.status(404).json({ message: \"القضية غير موجودة\" });\n      }\n\n      const caseData = insertCaseSchema.partial().parse(req.body);\n      const updatedCase = await storage.updateCase(req.params.id, caseData);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"case_updated\",\n        tableName: \"cases\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(existingCase),\n        newValues: JSON.stringify(updatedCase),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(updatedCase);\n    } catch (error) {\n      res.status(400).json({ message: \"بيانات القضية غير صحيحة\" });\n    }\n  });\n\n  app.delete(\"/api/cases/:id\", requireAuth, async (req, res) => {\n    try {\n      const existingCase = await storage.getCase(req.params.id);\n      if (!existingCase) {\n        return res.status(404).json({ message: \"القضية غير موجودة\" });\n      }\n\n      await storage.deleteCase(req.params.id);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"case_deleted\",\n        tableName: \"cases\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(existingCase),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.sendStatus(204);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في حذف القضية\" });\n    }\n  });\n\n  // Tasks routes\n  app.get(\"/api/tasks\", requireAuth, async (req, res) => {\n    try {\n      const { caseId, userId } = req.query;\n      let tasks;\n      \n      if (caseId) {\n        tasks = await storage.getTasksByCase(caseId as string);\n      } else if (userId) {\n        tasks = await storage.getTasksByUser(userId as string);\n      } else {\n        tasks = await storage.getTasks();\n      }\n      \n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب المهام\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", requireAuth, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n      \n      const taskData = insertTaskSchema.parse({\n        ...req.body,\n        createdBy: req.user.id\n      });\n      const task = await storage.createTask(taskData);\n      \n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"task_created\",\n        tableName: \"tasks\",\n        recordId: task.id,\n        newValues: JSON.stringify(task),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"بيانات المهمة غير صحيحة\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", requireAuth, async (req, res) => {\n    try {\n      const existingTask = await storage.getTask(req.params.id);\n      if (!existingTask) {\n        return res.status(404).json({ message: \"المهمة غير موجودة\" });\n      }\n\n      const taskData = insertTaskSchema.partial().parse(req.body);\n      const updatedTask = await storage.updateTask(req.params.id, taskData);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"task_updated\",\n        tableName: \"tasks\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(existingTask),\n        newValues: JSON.stringify(updatedTask),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(updatedTask);\n    } catch (error) {\n      res.status(400).json({ message: \"بيانات المهمة غير صحيحة\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", requireAuth, async (req, res) => {\n    try {\n      const existingTask = await storage.getTask(req.params.id);\n      if (!existingTask) {\n        return res.status(404).json({ message: \"المهمة غير موجودة\" });\n      }\n\n      await storage.deleteTask(req.params.id);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"task_deleted\",\n        tableName: \"tasks\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(existingTask),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.sendStatus(204);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في حذف المهمة\" });\n    }\n  });\n\n  // Documents routes\n  app.get(\"/api/documents\", requireAuth, async (req, res) => {\n    try {\n      const { caseId, clientId } = req.query;\n      let documents;\n      \n      if (caseId) {\n        documents = await storage.getDocumentsByCase(caseId as string);\n      } else if (clientId) {\n        documents = await storage.getDocumentsByClient(clientId as string);\n      } else {\n        documents = await storage.getDocuments();\n      }\n      \n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب المستندات\" });\n    }\n  });\n\n  app.post(\"/api/documents/upload\", requireAuth, upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"لم يتم رفع أي ملف\" });\n      }\n\n      const { title, documentType, caseId, clientId } = req.body;\n      \n      const documentData = insertDocumentSchema.parse({\n        title: title || req.file.originalname,\n        filename: req.file.originalname,\n        fileSize: req.file.size,\n        mimeType: req.file.mimetype,\n        filePath: req.file.path,\n        documentType,\n        caseId: caseId || null,\n        clientId: clientId || null,\n        uploadedBy: req.user?.id || '',\n      });\n\n      const document = await storage.createDocument(documentData);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"document_uploaded\",\n        tableName: \"documents\",\n        recordId: document.id,\n        newValues: JSON.stringify(document),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(document);\n    } catch (error) {\n      res.status(400).json({ message: \"خطأ في رفع المستند\" });\n    }\n  });\n\n  app.get(\"/api/documents/:id/download\", requireAuth, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      if (!document) {\n        return res.status(404).json({ message: \"المستند غير موجود\" });\n      }\n\n      if (!fs.existsSync(document.filePath)) {\n        return res.status(404).json({ message: \"الملف غير موجود\" });\n      }\n\n      res.download(document.filePath, document.filename);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في تحميل المستند\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", requireAuth, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      if (!document) {\n        return res.status(404).json({ message: \"المستند غير موجود\" });\n      }\n\n      // Delete file from filesystem\n      if (fs.existsSync(document.filePath)) {\n        fs.unlinkSync(document.filePath);\n      }\n\n      await storage.deleteDocument(req.params.id);\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"document_deleted\",\n        tableName: \"documents\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(document),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.sendStatus(204);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في حذف المستند\" });\n    }\n  });\n\n  // Users routes (admin only)\n  app.get(\"/api/users\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users.map(user => ({\n        id: user.id,\n        email: user.email,\n        fullName: user.fullName,\n        username: user.username,\n        role: user.role,\n        isActive: user.isActive,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب المستخدمين\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { fullName, role, isActive } = req.body;\n      const existingUser = await storage.getUser(req.params.id);\n      if (!existingUser) {\n        return res.status(404).json({ message: \"المستخدم غير موجود\" });\n      }\n\n      const updatedUser = await storage.updateUser(req.params.id, {\n        fullName,\n        role,\n        isActive,\n      });\n      \n      if (!req.user) {\n        return res.status(401).json({ message: \"غير مخول\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"user_updated\",\n        tableName: \"users\",\n        recordId: req.params.id,\n        oldValues: JSON.stringify(existingUser),\n        newValues: JSON.stringify(updatedUser),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json({\n        id: updatedUser.id,\n        email: updatedUser.email,\n        fullName: updatedUser.fullName,\n        username: updatedUser.username,\n        role: updatedUser.role,\n        isActive: updatedUser.isActive,\n        createdAt: updatedUser.createdAt,\n        updatedAt: updatedUser.updatedAt,\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"بيانات المستخدم غير صحيحة\" });\n    }\n  });\n\n  // Audit logs routes (admin only)\n  app.get(\"/api/audit-logs\", requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { userId } = req.query;\n      const logs = userId \n        ? await storage.getAuditLogsByUser(userId as string)\n        : await storage.getAuditLogs();\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"خطأ في جلب سجل الأنشطة\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":18393},"server/storage.ts":{"content":"import { users, clients, cases, tasks, documents, auditLogs } from \"@shared/schema\";\nimport type { \n  User, InsertUser, \n  Client, InsertClient,\n  Case, InsertCase,\n  Task, InsertTask,\n  Document, InsertDocument,\n  AuditLog, InsertAuditLog\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, like, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  getUsers(): Promise<User[]>;\n  \n  // Clients\n  getClient(id: string): Promise<Client | undefined>;\n  getClients(): Promise<Client[]>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client>;\n  deleteClient(id: string): Promise<void>;\n  searchClients(query: string): Promise<Client[]>;\n  \n  // Cases\n  getCase(id: string): Promise<Case | undefined>;\n  getCases(): Promise<Case[]>;\n  getCasesByClient(clientId: string): Promise<Case[]>;\n  getCasesByLawyer(lawyerId: string): Promise<Case[]>;\n  createCase(caseData: InsertCase): Promise<Case>;\n  updateCase(id: string, caseData: Partial<InsertCase>): Promise<Case>;\n  deleteCase(id: string): Promise<void>;\n  searchCases(query: string): Promise<Case[]>;\n  \n  // Tasks\n  getTask(id: string): Promise<Task | undefined>;\n  getTasks(): Promise<Task[]>;\n  getTasksByCase(caseId: string): Promise<Task[]>;\n  getTasksByUser(userId: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  \n  // Documents\n  getDocument(id: string): Promise<Document | undefined>;\n  getDocuments(): Promise<Document[]>;\n  getDocumentsByCase(caseId: string): Promise<Document[]>;\n  getDocumentsByClient(clientId: string): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: string, document: Partial<InsertDocument>): Promise<Document>;\n  deleteDocument(id: string): Promise<void>;\n  \n  // Audit Logs\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(): Promise<AuditLog[]>;\n  getAuditLogsByUser(userId: string): Promise<AuditLog[]>;\n  \n  // Dashboard Stats\n  getDashboardStats(): Promise<{\n    activeCases: number;\n    newClients: number;\n    pendingTasks: number;\n    recentDocuments: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: sql`now()` })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  // Clients\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client || undefined;\n  }\n\n  async getClients(): Promise<Client[]> {\n    return await db.select().from(clients).orderBy(desc(clients.createdAt));\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const [client] = await db.insert(clients).values(insertClient).returning();\n    return client;\n  }\n\n  async updateClient(id: string, clientData: Partial<InsertClient>): Promise<Client> {\n    const [client] = await db\n      .update(clients)\n      .set({ ...clientData, updatedAt: sql`now()` })\n      .where(eq(clients.id, id))\n      .returning();\n    return client;\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    await db.delete(clients).where(eq(clients.id, id));\n  }\n\n  async searchClients(query: string): Promise<Client[]> {\n    return await db\n      .select()\n      .from(clients)\n      .where(\n        or(\n          like(clients.name, `%${query}%`),\n          like(clients.email, `%${query}%`),\n          like(clients.phone, `%${query}%`)\n        )\n      )\n      .orderBy(desc(clients.createdAt));\n  }\n\n  // Cases\n  async getCase(id: string): Promise<Case | undefined> {\n    const [caseData] = await db.select().from(cases).where(eq(cases.id, id));\n    return caseData || undefined;\n  }\n\n  async getCases(): Promise<Case[]> {\n    return await db.select().from(cases).orderBy(desc(cases.createdAt));\n  }\n\n  async getCasesByClient(clientId: string): Promise<Case[]> {\n    return await db\n      .select()\n      .from(cases)\n      .where(eq(cases.clientId, clientId))\n      .orderBy(desc(cases.createdAt));\n  }\n\n  async getCasesByLawyer(lawyerId: string): Promise<Case[]> {\n    return await db\n      .select()\n      .from(cases)\n      .where(eq(cases.assignedLawyerId, lawyerId))\n      .orderBy(desc(cases.createdAt));\n  }\n\n  async createCase(insertCase: InsertCase): Promise<Case> {\n    const [caseData] = await db.insert(cases).values(insertCase).returning();\n    return caseData;\n  }\n\n  async updateCase(id: string, caseData: Partial<InsertCase>): Promise<Case> {\n    const [updatedCase] = await db\n      .update(cases)\n      .set({ ...caseData, updatedAt: sql`now()` })\n      .where(eq(cases.id, id))\n      .returning();\n    return updatedCase;\n  }\n\n  async deleteCase(id: string): Promise<void> {\n    await db.delete(cases).where(eq(cases.id, id));\n  }\n\n  async searchCases(query: string): Promise<Case[]> {\n    return await db\n      .select()\n      .from(cases)\n      .where(\n        or(\n          like(cases.caseNumber, `%${query}%`),\n          like(cases.title, `%${query}%`),\n          like(cases.description, `%${query}%`)\n        )\n      )\n      .orderBy(desc(cases.createdAt));\n  }\n\n  // Tasks\n  async getTask(id: string): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task || undefined;\n  }\n\n  async getTasks(): Promise<Task[]> {\n    return await db.select().from(tasks).orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByCase(caseId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.caseId, caseId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByUser(userId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.assignedToId, userId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const [task] = await db.insert(tasks).values(insertTask).returning();\n    return task;\n  }\n\n  async updateTask(id: string, taskData: Partial<InsertTask>): Promise<Task> {\n    const [task] = await db\n      .update(tasks)\n      .set({ ...taskData, updatedAt: sql`now()` })\n      .where(eq(tasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  // Documents\n  async getDocument(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async getDocuments(): Promise<Document[]> {\n    return await db.select().from(documents).orderBy(desc(documents.createdAt));\n  }\n\n  async getDocumentsByCase(caseId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.caseId, caseId))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async getDocumentsByClient(clientId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.clientId, clientId))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db.insert(documents).values(insertDocument).returning();\n    return document;\n  }\n\n  async updateDocument(id: string, documentData: Partial<InsertDocument>): Promise<Document> {\n    const [document] = await db\n      .update(documents)\n      .set(documentData)\n      .where(eq(documents.id, id))\n      .returning();\n    return document;\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  // Audit Logs\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db.insert(auditLogs).values(insertLog).returning();\n    return log;\n  }\n\n  async getAuditLogs(): Promise<AuditLog[]> {\n    return await db.select().from(auditLogs).orderBy(desc(auditLogs.createdAt));\n  }\n\n  async getAuditLogsByUser(userId: string): Promise<AuditLog[]> {\n    return await db\n      .select()\n      .from(auditLogs)\n      .where(eq(auditLogs.userId, userId))\n      .orderBy(desc(auditLogs.createdAt));\n  }\n\n  // Dashboard Stats\n  async getDashboardStats() {\n    const [activeCasesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(cases)\n      .where(eq(cases.status, \"active\"));\n\n    const [newClientsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(clients)\n      .where(sql`${clients.createdAt} >= now() - interval '7 days'`);\n\n    const [pendingTasksResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(tasks)\n      .where(eq(tasks.status, \"pending\"));\n\n    const [recentDocumentsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(documents)\n      .where(sql`${documents.createdAt} >= now() - interval '1 day'`);\n\n    return {\n      activeCases: activeCasesResult?.count || 0,\n      newClients: newClientsResult?.count || 0,\n      pendingTasks: pendingTasksResult?.count || 0,\n      recentDocuments: recentDocumentsResult?.count || 0,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10589},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, pgEnum, boolean, uuid } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"admin\", \"lawyer\", \"secretary\"]);\nexport const caseStatusEnum = pgEnum(\"case_status\", [\"active\", \"pending\", \"closed\", \"archived\"]);\nexport const casePriorityEnum = pgEnum(\"case_priority\", [\"low\", \"medium\", \"high\", \"urgent\"]);\nexport const taskStatusEnum = pgEnum(\"task_status\", [\"pending\", \"in_progress\", \"completed\", \"cancelled\"]);\nexport const taskPriorityEnum = pgEnum(\"task_priority\", [\"low\", \"medium\", \"high\", \"urgent\"]);\nexport const documentTypeEnum = pgEnum(\"document_type\", [\"case_file\", \"client_correspondence\", \"court_document\", \"contract\", \"other\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"secretary\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  nationalId: text(\"national_id\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  createdBy: uuid(\"created_by\").notNull().references(() => users.id),\n});\n\n// Cases table\nexport const cases = pgTable(\"cases\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseNumber: text(\"case_number\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: caseStatusEnum(\"status\").notNull().default(\"active\"),\n  priority: casePriorityEnum(\"priority\").notNull().default(\"medium\"),\n  caseType: text(\"case_type\").notNull(),\n  court: text(\"court\"),\n  judge: text(\"judge\"),\n  opposingParty: text(\"opposing_party\"),\n  clientId: uuid(\"client_id\").notNull().references(() => clients.id),\n  assignedLawyerId: uuid(\"assigned_lawyer_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  createdBy: uuid(\"created_by\").notNull().references(() => users.id),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: taskStatusEnum(\"status\").notNull().default(\"pending\"),\n  priority: taskPriorityEnum(\"priority\").notNull().default(\"medium\"),\n  dueDate: timestamp(\"due_date\"),\n  caseId: uuid(\"case_id\").references(() => cases.id),\n  assignedToId: uuid(\"assigned_to_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  createdBy: uuid(\"created_by\").notNull().references(() => users.id),\n});\n\n// Documents table\nexport const documents = pgTable(\"documents\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  filename: text(\"filename\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  documentType: documentTypeEnum(\"document_type\").notNull().default(\"other\"),\n  caseId: uuid(\"case_id\").references(() => cases.id),\n  clientId: uuid(\"client_id\").references(() => clients.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  uploadedBy: uuid(\"uploaded_by\").notNull().references(() => users.id),\n});\n\n// Audit logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  tableName: text(\"table_name\").notNull(),\n  recordId: text(\"record_id\"),\n  oldValues: text(\"old_values\"),\n  newValues: text(\"new_values\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  createdClients: many(clients, { relationName: \"clientCreator\" }),\n  createdCases: many(cases, { relationName: \"caseCreator\" }),\n  assignedCases: many(cases, { relationName: \"assignedLawyer\" }),\n  createdTasks: many(tasks, { relationName: \"taskCreator\" }),\n  assignedTasks: many(tasks, { relationName: \"taskAssignee\" }),\n  uploadedDocuments: many(documents),\n  auditLogs: many(auditLogs),\n}));\n\nexport const clientsRelations = relations(clients, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [clients.createdBy],\n    references: [users.id],\n    relationName: \"clientCreator\",\n  }),\n  cases: many(cases),\n  documents: many(documents),\n}));\n\nexport const casesRelations = relations(cases, ({ one, many }) => ({\n  client: one(clients, {\n    fields: [cases.clientId],\n    references: [clients.id],\n  }),\n  assignedLawyer: one(users, {\n    fields: [cases.assignedLawyerId],\n    references: [users.id],\n    relationName: \"assignedLawyer\",\n  }),\n  createdBy: one(users, {\n    fields: [cases.createdBy],\n    references: [users.id],\n    relationName: \"caseCreator\",\n  }),\n  tasks: many(tasks),\n  documents: many(documents),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one }) => ({\n  case: one(cases, {\n    fields: [tasks.caseId],\n    references: [cases.id],\n  }),\n  assignedTo: one(users, {\n    fields: [tasks.assignedToId],\n    references: [users.id],\n    relationName: \"taskAssignee\",\n  }),\n  createdBy: one(users, {\n    fields: [tasks.createdBy],\n    references: [users.id],\n    relationName: \"taskCreator\",\n  }),\n}));\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  case: one(cases, {\n    fields: [documents.caseId],\n    references: [cases.id],\n  }),\n  client: one(clients, {\n    fields: [documents.clientId],\n    references: [clients.id],\n  }),\n  uploadedBy: one(users, {\n    fields: [documents.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [auditLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCaseSchema = createInsertSchema(cases).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Case = typeof cases.$inferSelect;\nexport type InsertCase = z.infer<typeof insertCaseSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n","size_bytes":8208},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Cases from \"@/pages/cases\";\nimport Clients from \"@/pages/clients\";\nimport Documents from \"@/pages/documents\";\nimport Tasks from \"@/pages/tasks\";\nimport Users from \"@/pages/users\";\nimport Audit from \"@/pages/audit\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/cases\" component={Cases} />\n      <ProtectedRoute path=\"/clients\" component={Clients} />\n      <ProtectedRoute path=\"/documents\" component={Documents} />\n      <ProtectedRoute path=\"/tasks\" component={Tasks} />\n      <ProtectedRoute path=\"/users\" component={Users} />\n      <ProtectedRoute path=\"/audit\" component={Audit} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <div dir=\"rtl\">\n            <Toaster />\n            <Router />\n          </div>\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1594},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 98%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --radius: 0.5rem;\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":2668},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = {\n  email: string;\n  password: string;\n};\n\ntype RegisterData = {\n  email: string;\n  password: string;\n  fullName: string;\n  username: string;\n  role?: \"admin\" | \"lawyer\" | \"secretary\";\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"تم تسجيل الدخول بنجاح\",\n        description: `مرحباً ${user.fullName}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ في تسجيل الدخول\",\n        description: \"تأكد من البريد الإلكتروني وكلمة المرور\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"تم إنشاء الحساب بنجاح\",\n        description: `مرحباً ${user.fullName}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ في إنشاء الحساب\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"تم تسجيل الخروج بنجاح\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ في تسجيل الخروج\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3427},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\n// Helper functions for different toast types\ntoast.success = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'success' })\ntoast.error = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'destructive' })\ntoast.warning = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'warning' })\ntoast.info = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'info' })\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\n// Helper functions for different toast types\ntoast.success = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'success' })\ntoast.error = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'destructive' })\ntoast.warning = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'warning' })\ntoast.info = (props: Omit<Toast, 'variant'>) => toast({ ...props, variant: 'info' })\n\nexport { useToast, toast }\n","size_bytes":4709},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />;\n}\n","size_bytes":676},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/audit.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useState } from \"react\";\nimport { Search, Activity, User, FileText, Briefcase, Users, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\ninterface AuditLog {\n  id: string;\n  userId?: string;\n  action: string;\n  tableName: string;\n  recordId?: string;\n  oldValues?: string;\n  newValues?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  createdAt: string;\n}\n\nexport default function Audit() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: auditLogs, isLoading } = useQuery<AuditLog[]>({\n    queryKey: [\"/api/audit-logs\"],\n  });\n\n  const getActionBadge = (action: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      user_registered: \"default\",\n      user_login: \"secondary\",\n      user_logout: \"outline\",\n      user_updated: \"default\",\n      client_created: \"default\",\n      client_updated: \"secondary\",\n      client_deleted: \"destructive\",\n      case_created: \"default\",\n      case_updated: \"secondary\",\n      case_deleted: \"destructive\",\n      task_created: \"default\",\n      task_updated: \"secondary\",\n      task_deleted: \"destructive\",\n      document_uploaded: \"default\",\n      document_deleted: \"destructive\",\n    };\n    \n    const labels: Record<string, string> = {\n      user_registered: \"تسجيل مستخدم\",\n      user_login: \"تسجيل دخول\",\n      user_logout: \"تسجيل خروج\",\n      user_updated: \"تحديث مستخدم\",\n      client_created: \"إنشاء عميل\",\n      client_updated: \"تحديث عميل\",\n      client_deleted: \"حذف عميل\",\n      case_created: \"إنشاء قضية\",\n      case_updated: \"تحديث قضية\",\n      case_deleted: \"حذف قضية\",\n      task_created: \"إنشاء مهمة\",\n      task_updated: \"تحديث مهمة\",\n      task_deleted: \"حذف مهمة\",\n      document_uploaded: \"رفع مستند\",\n      document_deleted: \"حذف مستند\",\n    };\n\n    return (\n      <Badge variant={variants[action] || \"outline\"}>\n        {labels[action] || action}\n      </Badge>\n    );\n  };\n\n  const getTableIcon = (tableName: string) => {\n    const icons: Record<string, React.ReactNode> = {\n      users: <User className=\"w-4 h-4\" />,\n      clients: <Users className=\"w-4 h-4\" />,\n      cases: <Briefcase className=\"w-4 h-4\" />,\n      tasks: <Activity className=\"w-4 h-4\" />,\n      documents: <FileText className=\"w-4 h-4\" />,\n    };\n\n    return icons[tableName] || <Activity className=\"w-4 h-4\" />;\n  };\n\n  const filteredLogs = auditLogs?.filter(log =>\n    log.action.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    log.tableName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    log.ipAddress?.includes(searchQuery)\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n        <Sidebar />\n        \n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <Header />\n          \n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h1 className=\"text-2xl font-bold text-slate-900\">سجل الأنشطة</h1>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>سجل الأنشطة</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[...Array(10)].map((_, i) => (\n                    <div key={i} className=\"flex items-center justify-between p-4 border border-slate-100 rounded-lg\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <Skeleton className=\"h-8 w-8 rounded-full\" />\n                        <div className=\"space-y-2\">\n                          <Skeleton className=\"h-4 w-48\" />\n                          <Skeleton className=\"h-3 w-32\" />\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col items-end space-y-1\">\n                        <Skeleton className=\"h-6 w-20\" />\n                        <Skeleton className=\"h-3 w-24\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold text-slate-900\">سجل الأنشطة</h1>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>سجل الأنشطة</CardTitle>\n                <div className=\"relative w-80\">\n                  <Input\n                    placeholder=\"البحث في الأنشطة...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-audit\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {filteredLogs.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-500\">\n                    {searchQuery ? \"لا توجد أنشطة مطابقة لبحثك\" : \"لا توجد أنشطة\"}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {filteredLogs.map((log) => (\n                    <div\n                      key={log.id}\n                      className=\"flex items-center justify-between p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\n                      data-testid={`audit-log-${log.id}`}\n                    >\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center\">\n                          {getTableIcon(log.tableName)}\n                        </div>\n                        <div>\n                          <div className=\"flex items-center space-x-2 space-x-reverse mb-1\">\n                            {getActionBadge(log.action)}\n                            <span className=\"text-sm text-slate-600\">على جدول {log.tableName}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2 space-x-reverse text-xs text-slate-500\">\n                            {log.ipAddress && (\n                              <span>IP: {log.ipAddress}</span>\n                            )}\n                            {log.recordId && (\n                              <span>ID: {log.recordId}</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex flex-col items-end text-xs text-slate-500\">\n                        <div className=\"flex items-center mb-1\">\n                          <Calendar className=\"w-3 h-3 ml-1\" />\n                          {format(new Date(log.createdAt), \"PPpp\", { locale: ar })}\n                        </div>\n                        {log.userId && (\n                          <span>المستخدم: {log.userId}</span>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8410},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Scale, Loader2 } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginData, setLoginData] = useState({ email: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({\n    email: \"\",\n    password: \"\",\n    fullName: \"\",\n    username: \"\",\n    role: \"secretary\" as \"admin\" | \"lawyer\" | \"secretary\",\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\" dir=\"rtl\">\n      {/* Left Side - Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-primary-600 rounded-lg flex items-center justify-center ml-3\">\n                <Scale className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-slate-900\">Lexora</h1>\n                <p className=\"text-sm text-slate-500\">نظام إدارة المكتب القانوني</p>\n              </div>\n            </div>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"auth-tabs\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">تسجيل الدخول</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">إنشاء حساب</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>تسجيل الدخول</CardTitle>\n                  <CardDescription>\n                    أدخل بياناتك للوصول إلى نظام إدارة المكتب القانوني\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">البريد الإلكتروني</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"admin@example.com\"\n                        value={loginData.email}\n                        onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}\n                        required\n                        data-testid=\"input-email\"\n                        className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"password\">كلمة المرور</Label>\n                      <Input\n                        id=\"password\"\n                        type=\"password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                        required\n                        data-testid=\"input-password\"\n                        className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"ml-2 h-4 w-4 animate-spin\" />\n                          جاري تسجيل الدخول...\n                        </>\n                      ) : (\n                        \"تسجيل الدخول\"\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>إنشاء حساب جديد</CardTitle>\n                  <CardDescription>\n                    أنشئ حساباً جديداً للوصول إلى النظام\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"fullName\">الاسم الكامل</Label>\n                      <Input\n                        id=\"fullName\"\n                        placeholder=\"أحمد محمد السالم\"\n                        value={registerData.fullName}\n                        onChange={(e) => setRegisterData({ ...registerData, fullName: e.target.value })}\n                        required\n                        data-testid=\"input-fullname\"\n                        className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"username\">اسم المستخدم</Label>\n                      <Input\n                        id=\"username\"\n                        placeholder=\"ahmed.salem\"\n                        value={registerData.username}\n                        onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                        required\n                        data-testid=\"input-username\"\n                        className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-email\">البريد الإلكتروني</Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        placeholder=\"ahmed@example.com\"\n                        value={registerData.email}\n                        onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}\n                        required\n                        data-testid=\"input-register-email\"\n                        className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">كلمة المرور</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        value={registerData.password}\n                        onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                        required\n                        data-testid=\"input-register-password\"\n                        className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"role\">الدور</Label>\n                      <Select \n                        value={registerData.role} \n                        onValueChange={(value: \"admin\" | \"lawyer\" | \"secretary\") => \n                          setRegisterData({ ...registerData, role: value })\n                        }\n                        data-testid=\"select-role\"\n                      >\n                        <SelectTrigger className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                          <SelectItem value=\"secretary\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">سكرتير</SelectItem>\n                          <SelectItem value=\"lawyer\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">محامي</SelectItem>\n                          <SelectItem value=\"admin\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">مدير</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"ml-2 h-4 w-4 animate-spin\" />\n                          جاري إنشاء الحساب...\n                        </>\n                      ) : (\n                        \"إنشاء الحساب\"\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right Side - Hero */}\n      <div className=\"hidden lg:flex lg:flex-1 bg-gradient-to-br from-primary-600 to-primary-800\">\n        <div className=\"flex items-center justify-center w-full p-12\">\n          <div className=\"text-center text-white\">\n            <h2 className=\"text-4xl font-bold mb-6\">\n              مرحباً بك في نظام Lexora\n            </h2>\n            <p className=\"text-xl mb-8 text-primary-100\">\n              نظام شامل لإدارة المكاتب القانونية\n            </p>\n            <div className=\"grid grid-cols-1 gap-4 text-right\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-white rounded-full ml-3\"></div>\n                <span>إدارة القضايا والعملاء</span>\n              </div>\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-white rounded-full ml-3\"></div>\n                <span>تتبع المهام والمواعيد</span>\n              </div>\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-white rounded-full ml-3\"></div>\n                <span>إدارة المستندات</span>\n              </div>\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-white rounded-full ml-3\"></div>\n                <span>تقارير وإحصائيات شاملة</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11841},"client/src/pages/cases.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport CaseForm from \"@/components/cases/case-form\";\nimport CaseList from \"@/components/cases/case-list\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Cases() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingCase, setEditingCase] = useState(null);\n\n  const { data: cases, isLoading } = useQuery({\n    queryKey: [\"/api/cases\"],\n  }) as { data: any; isLoading: boolean };\n\n  const handleEdit = (caseData: any) => {\n    setEditingCase(caseData);\n    setShowForm(true);\n  };\n\n  const handleFormClose = () => {\n    setShowForm(false);\n    setEditingCase(null);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold text-slate-900\">إدارة القضايا</h1>\n            <Button \n              onClick={() => setShowForm(true)} \n              className=\"bg-primary-600 hover:bg-primary-700 text-white rounded-lg\"\n              data-testid=\"button-add-case\"\n            >\n              <Plus className=\"ml-2 w-4 h-4 text-white\" />\n              إضافة قضية جديدة\n            </Button>\n          </div>\n\n          <CaseList \n            cases={cases} \n            isLoading={isLoading}\n            onEdit={handleEdit}\n          />\n\n          <Dialog open={showForm} onOpenChange={setShowForm}>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-white\" dir=\"rtl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-bold\">\n                  {editingCase ? \"تعديل القضية\" : \"إضافة قضية جديدة\"}\n                </DialogTitle>\n                <DialogDescription className=\"sr-only\">\n                  {editingCase ? \"نموذج تعديل بيانات القضية\" : \"نموذج إضافة قضية جديدة\"}\n                </DialogDescription>\n              </DialogHeader>\n              <Card className=\"border-0 shadow-none\">\n                <CardContent className=\"p-0\">\n                  <CaseForm \n                    case={editingCase} \n                    onClose={handleFormClose}\n                    onSuccess={handleFormClose}\n                  />\n                </CardContent>\n              </Card>\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2946},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport ClientForm from \"@/components/clients/client-form\";\nimport ClientList from \"@/components/clients/client-list\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Clients() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingClient, setEditingClient] = useState(null);\n\n  const { data: clients, isLoading } = useQuery({\n    queryKey: [\"/api/clients\"],\n  }) as { data: any; isLoading: boolean };\n\n  const handleEdit = (clientData: any) => {\n    setEditingClient(clientData);\n    setShowForm(true);\n  };\n\n  const handleFormClose = () => {\n    setShowForm(false);\n    setEditingClient(null);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold text-slate-900\">إدارة العملاء</h1>\n            <Button \n              onClick={() => setShowForm(true)} \n              className=\"bg-primary-600 hover:bg-primary-700 text-white rounded-lg\"\n              data-testid=\"button-add-client\"\n            >\n              <Plus className=\"ml-2 w-4 h-4 text-white\" />\n              إضافة عميل جديد\n            </Button>\n          </div>\n\n          <ClientList \n            clients={clients} \n            isLoading={isLoading}\n            onEdit={handleEdit}\n          />\n\n          <Dialog open={showForm} onOpenChange={setShowForm}>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-white\" dir=\"rtl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-bold\">\n                  {editingClient ? \"تعديل العميل\" : \"إضافة عميل جديد\"}\n                </DialogTitle>\n                <DialogDescription className=\"sr-only\">\n                  {editingClient ? \"نموذج تعديل بيانات العميل\" : \"نموذج إضافة عميل جديد\"}\n                </DialogDescription>\n              </DialogHeader>\n              <Card className=\"border-0 shadow-none\">\n                <CardContent className=\"p-0\">\n                  <ClientForm \n                    client={editingClient} \n                    onClose={handleFormClose}\n                    onSuccess={handleFormClose}\n                  />\n                </CardContent>\n              </Card>\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2988},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport StatsCards from \"@/components/dashboard/stats-cards\";\nimport RecentCases from \"@/components/dashboard/recent-cases\";\nimport TasksSidebar from \"@/components/dashboard/tasks-sidebar\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  }) as { data: any; isLoading: boolean };\n\n  const { data: recentCases, isLoading: casesLoading } = useQuery({\n    queryKey: [\"/api/cases\"],\n  }) as { data: any; isLoading: boolean };\n\n  const { data: userTasks, isLoading: tasksLoading } = useQuery({\n    queryKey: [\"/api/tasks\"],\n    queryFn: () => fetch(`/api/tasks?userId=${user?.id}`).then(res => res.json()),\n  });\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Dashboard Header */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold text-slate-900\" data-testid=\"text-welcome\">\n              مرحباً، {user?.fullName}\n            </h2>\n            <p className=\"text-slate-600 mt-1\">\n              إليك نظرة عامة على نشاط مكتبك القانوني اليوم\n            </p>\n          </div>\n\n          {/* Stats Cards */}\n          <StatsCards stats={stats} isLoading={statsLoading} />\n\n          {/* Quick Actions */}\n          <div className=\"mb-6\">\n            <QuickActions />\n          </div>\n\n          {/* Content Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Recent Cases */}\n            <div className=\"lg:col-span-2\">\n              <RecentCases cases={recentCases} isLoading={casesLoading} />\n            </div>\n\n            {/* Tasks and Notifications */}\n            <div className=\"space-y-6\">\n              <TasksSidebar tasks={userTasks} isLoading={tasksLoading} />\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2351},"client/src/pages/documents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport DocumentUpload from \"@/components/documents/document-upload\";\nimport DocumentList from \"@/components/documents/document-list\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Upload } from \"lucide-react\";\n\nexport default function Documents() {\n  const [showUpload, setShowUpload] = useState(false);\n\n  const { data: documents, isLoading } = useQuery({\n    queryKey: [\"/api/documents\"],\n  }) as { data: any; isLoading: boolean };\n\n  const handleUploadClose = () => {\n    setShowUpload(false);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold text-slate-900\">إدارة المستندات</h1>\n            <Button \n              onClick={() => setShowUpload(true)} \n              className=\"bg-primary-600 hover:bg-primary-700 text-white rounded-lg\"\n              data-testid=\"button-upload-document\"\n            >\n              <Upload className=\"ml-2 w-4 h-4 text-white\" />\n              رفع مستند جديد\n            </Button>\n          </div>\n\n          <DocumentList \n            documents={documents} \n            isLoading={isLoading}\n          />\n\n          <Dialog open={showUpload} onOpenChange={setShowUpload}>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-white\" dir=\"rtl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-bold\">\n                  رفع مستند جديد\n                </DialogTitle>\n                <DialogDescription className=\"sr-only\">\n                  نموذج رفع مستند جديد\n                </DialogDescription>\n              </DialogHeader>\n              <Card className=\"border-0 shadow-none\">\n                <CardContent className=\"p-0\">\n                  <DocumentUpload \n                    onClose={handleUploadClose}\n                    onSuccess={handleUploadClose}\n                  />\n                </CardContent>\n              </Card>\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2654},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/tasks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport TaskForm from \"@/components/tasks/task-form\";\nimport TaskList from \"@/components/tasks/task-list\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Tasks() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingTask, setEditingTask] = useState(null);\n\n  const { data: tasks, isLoading } = useQuery({\n    queryKey: [\"/api/tasks\"],\n  }) as { data: any; isLoading: boolean };\n\n  const handleEdit = (taskData: any) => {\n    setEditingTask(taskData);\n    setShowForm(true);\n  };\n\n  const handleFormClose = () => {\n    setShowForm(false);\n    setEditingTask(null);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold text-slate-900\">إدارة المهام</h1>\n            <Button \n              onClick={() => setShowForm(true)} \n              className=\"bg-primary-600 hover:bg-primary-700 text-white rounded-lg\"\n              data-testid=\"button-add-task\"\n            >\n              <Plus className=\"ml-2 w-4 h-4 text-white\" />\n              إضافة مهمة جديدة\n            </Button>\n          </div>\n\n          <TaskList \n            tasks={tasks} \n            isLoading={isLoading}\n            onEdit={handleEdit}\n          />\n\n          <Dialog open={showForm} onOpenChange={setShowForm}>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-white\" dir=\"rtl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-bold\">\n                  {editingTask ? \"تعديل المهمة\" : \"إضافة مهمة جديدة\"}\n                </DialogTitle>\n                <DialogDescription className=\"sr-only\">\n                  {editingTask ? \"نموذج تعديل بيانات المهمة\" : \"نموذج إضافة مهمة جديدة\"}\n                </DialogDescription>\n              </DialogHeader>\n              <Card className=\"border-0 shadow-none\">\n                <CardContent className=\"p-0\">\n                  <TaskForm \n                    task={editingTask} \n                    onClose={handleFormClose}\n                    onSuccess={handleFormClose}\n                  />\n                </CardContent>\n              </Card>\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2944},"client/src/pages/users.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useState } from \"react\";\nimport { Edit, Search, Shield, ShieldCheck, ShieldX } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\ninterface User {\n  id: string;\n  fullName: string;\n  email: string;\n  username: string;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function Users() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const getRoleBadge = (role: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      admin: \"destructive\",\n      lawyer: \"default\",\n      secretary: \"secondary\",\n    };\n    \n    const labels: Record<string, string> = {\n      admin: \"مدير\",\n      lawyer: \"محامي\",\n      secretary: \"سكرتير\",\n    };\n\n    const icons: Record<string, React.ReactNode> = {\n      admin: <ShieldCheck className=\"w-3 h-3 ml-1\" />,\n      lawyer: <Shield className=\"w-3 h-3 ml-1\" />,\n      secretary: <ShieldX className=\"w-3 h-3 ml-1\" />,\n    };\n\n    return (\n      <Badge variant={variants[role] || \"outline\"} className=\"flex items-center\">\n        {icons[role]}\n        {labels[role] || role}\n      </Badge>\n    );\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return (\n      <Badge variant={isActive ? \"default\" : \"outline\"}>\n        {isActive ? \"نشط\" : \"غير نشط\"}\n      </Badge>\n    );\n  };\n\n  const filteredUsers = users?.filter(user =>\n    user.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    user.username.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n        <Sidebar />\n        \n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <Header />\n          \n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h1 className=\"text-2xl font-bold text-slate-900\">إدارة المستخدمين</h1>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>قائمة المستخدمين</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"flex items-center justify-between p-4 border border-slate-100 rounded-lg\">\n                      <div className=\"flex items-center space-x-4 space-x-reverse\">\n                        <Skeleton className=\"h-12 w-12 rounded-full\" />\n                        <div className=\"space-y-2\">\n                          <Skeleton className=\"h-4 w-32\" />\n                          <Skeleton className=\"h-3 w-48\" />\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2 space-x-reverse\">\n                        <Skeleton className=\"h-6 w-16\" />\n                        <Skeleton className=\"h-6 w-16\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\" dir=\"rtl\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <Header />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold text-slate-900\">إدارة المستخدمين</h1>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>قائمة المستخدمين</CardTitle>\n                <div className=\"relative w-80\">\n                  <Input\n                    placeholder=\"البحث في المستخدمين...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-users\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {filteredUsers.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-slate-500\">\n                    {searchQuery ? \"لا يوجد مستخدمون مطابقون لبحثك\" : \"لا يوجد مستخدمون\"}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-slate-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                          المستخدم\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                          البريد الإلكتروني\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                          الدور\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                          الحالة\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                          تاريخ الإنشاء\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                          إجراءات\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-slate-200\">\n                      {filteredUsers.map((user) => (\n                        <tr key={user.id} className=\"hover:bg-slate-50\" data-testid={`user-row-${user.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"h-10 w-10 bg-primary-100 rounded-full flex items-center justify-center\">\n                                <span className=\"text-primary-600 font-medium text-sm\">\n                                  {user.fullName.charAt(0)}\n                                </span>\n                              </div>\n                              <div className=\"mr-4\">\n                                <div className=\"text-sm font-medium text-slate-900\">\n                                  {user.fullName}\n                                </div>\n                                <div className=\"text-sm text-slate-500\">\n                                  @{user.username}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-700\">\n                            {user.email}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {getRoleBadge(user.role)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {getStatusBadge(user.isActive)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-700\">\n                            {format(new Date(user.createdAt), \"PPP\", { locale: ar })}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              data-testid={`button-edit-user-${user.id}`}\n                            >\n                              <Edit className=\"w-4 h-4 ml-1\" />\n                              تعديل\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9400},"client/src/components/cases/case-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertCaseSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Loader2 } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst caseFormSchema = insertCaseSchema.extend({\n  caseNumber: z.string().min(1, \"رقم القضية مطلوب\"),\n  title: z.string().min(1, \"عنوان القضية مطلوب\"),\n  caseType: z.string().min(1, \"نوع القضية مطلوب\"),\n  clientId: z.string().min(1, \"العميل مطلوب\"),\n  assignedLawyerId: z.string().min(1, \"المحامي المسؤول مطلوب\"),\n});\n\ninterface CaseFormProps {\n  case?: any;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function CaseForm({ case: editCase, onClose, onSuccess }: CaseFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: clients } = useQuery({\n    queryKey: [\"/api/clients\"],\n  }) as { data: any[] | undefined };\n\n  const { data: lawyers } = useQuery({\n    queryKey: [\"/api/users\"],\n    queryFn: () => fetch(\"/api/users\").then(res => res.json()).then(users => \n      users.filter((u: any) => u.role === \"lawyer\" || u.role === \"admin\")\n    ),\n  });\n\n  const form = useForm({\n    resolver: zodResolver(caseFormSchema),\n    defaultValues: {\n      caseNumber: editCase?.caseNumber || \"\",\n      title: editCase?.title || \"\",\n      description: editCase?.description || \"\",\n      status: editCase?.status || \"active\",\n      priority: editCase?.priority || \"medium\",\n      caseType: editCase?.caseType || \"\",\n      court: editCase?.court || \"\",\n      judge: editCase?.judge || \"\",\n      opposingParty: editCase?.opposingParty || \"\",\n      clientId: editCase?.clientId || \"\",\n      assignedLawyerId: editCase?.assignedLawyerId || \"\",\n      createdBy: user?.id || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof caseFormSchema>) => {\n      const res = await apiRequest(\"POST\", \"/api/cases\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      toast({ title: \"تم إنشاء القضية بنجاح\" });\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"خطأ في إنشاء القضية\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof caseFormSchema>) => {\n      const res = await apiRequest(\"PUT\", `/api/cases/${editCase.id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      toast({ title: \"تم تحديث القضية بنجاح\" });\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"خطأ في تحديث القضية\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof caseFormSchema>) => {\n    if (editCase) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <div className=\"space-y-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"caseNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رقم القضية</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"C-2024-001\" {...field} data-testid=\"input-case-number\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"clientId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العميل</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-client\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue placeholder=\"اختر العميل\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        {clients?.map((client: any) => (\n                          <SelectItem key={client.id} value={client.id} className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">\n                            {client.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>عنوان القضية</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"عنوان القضية\" {...field} data-testid=\"input-case-title\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>وصف القضية</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"وصف تفصيلي للقضية\"\n                      rows={3}\n                      {...field} \n                      data-testid=\"textarea-case-description\"\n                      className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"caseType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>نوع القضية</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"نزاع تجاري\" {...field} data-testid=\"input-case-type\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الحالة</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-status\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        <SelectItem value=\"active\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">نشطة</SelectItem>\n                        <SelectItem value=\"pending\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">معلقة</SelectItem>\n                        <SelectItem value=\"closed\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">مغلقة</SelectItem>\n                        <SelectItem value=\"archived\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">مؤرشفة</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الأولوية</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-priority\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        <SelectItem value=\"low\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">منخفضة</SelectItem>\n                        <SelectItem value=\"medium\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">متوسطة</SelectItem>\n                        <SelectItem value=\"high\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">عالية</SelectItem>\n                        <SelectItem value=\"urgent\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">عاجلة</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"assignedLawyerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>المحامي المسؤول</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-lawyer\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue placeholder=\"اختر المحامي\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        {lawyers?.map((lawyer: any) => (\n                          <SelectItem key={lawyer.id} value={lawyer.id} className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">\n                            {lawyer.fullName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"court\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>المحكمة</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"المحكمة التجارية\" {...field} data-testid=\"input-court\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"judge\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>القاضي</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"اسم القاضي\" {...field} data-testid=\"input-judge\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"opposingParty\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الطرف المقابل</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"اسم الطرف المقابل\" {...field} data-testid=\"input-opposing-party\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 space-x-reverse\">\n              <Button type=\"button\" onClick={onClose} data-testid=\"button-cancel\" className=\"bg-red-500 hover:bg-red-600 text-white border-0 rounded-lg\">\n                إلغاء\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-case\" className=\"bg-primary-600 hover:bg-primary-700 text-white border-0 rounded-lg\">\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"ml-2 h-4 w-4 animate-spin text-white\" />\n                    جاري الحفظ...\n                  </>\n                ) : (\n                  editCase ? \"تحديث القضية\" : \"إنشاء القضية\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n    </div>\n  );\n}\n","size_bytes":15358},"client/src/components/cases/case-list.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Eye, Edit, Trash2, Search } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Case {\n  id: string;\n  caseNumber: string;\n  title: string;\n  status: string;\n  priority: string;\n  caseType: string;\n  clientId: string;\n  assignedLawyerId: string;\n  court?: string;\n  description?: string;\n  createdAt: string;\n}\n\ninterface CaseListProps {\n  cases: Case[] | undefined;\n  isLoading: boolean;\n  onEdit: (caseData: Case) => void;\n}\n\nexport default function CaseList({ cases, isLoading, onEdit }: CaseListProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cases/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cases\"] });\n      toast({ title: \"تم حذف القضية بنجاح\" });\n    },\n    onError: () => {\n      toast({ title: \"خطأ في حذف القضية\", variant: \"destructive\" });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      active: \"default\",\n      pending: \"secondary\",\n      closed: \"outline\",\n      archived: \"destructive\",\n    };\n    \n    const labels: Record<string, string> = {\n      active: \"نشطة\",\n      pending: \"معلقة\",\n      closed: \"مغلقة\",\n      archived: \"مؤرشفة\",\n    };\n\n    return (\n      <Badge variant={variants[status] || \"outline\"}>\n        {labels[status] || status}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      high: \"destructive\",\n      medium: \"secondary\",\n      low: \"outline\",\n      urgent: \"destructive\",\n    };\n    \n    const labels: Record<string, string> = {\n      high: \"عالية\",\n      medium: \"متوسطة\",\n      low: \"منخفضة\",\n      urgent: \"عاجلة\",\n    };\n\n    return (\n      <Badge variant={variants[priority] || \"outline\"}>\n        {labels[priority] || priority}\n      </Badge>\n    );\n  };\n\n  const filteredCases = cases?.filter(caseItem =>\n    caseItem.caseNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    caseItem.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    caseItem.caseType.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-slate-900\">قائمة القضايا</h2>\n          <div className=\"relative w-80\">\n            <Input\n              placeholder=\"البحث في القضايا...\"\n              disabled\n              className=\"pl-10 bg-white border-0 shadow-md\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n          </div>\n        </div>\n        <Card className=\"bg-white shadow-md border-0\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-4 border border-slate-100 rounded-lg\">\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-32\" />\n                    <Skeleton className=\"h-3 w-48\" />\n                  </div>\n                  <div className=\"flex space-x-2 space-x-reverse\">\n                    <Skeleton className=\"h-6 w-16\" />\n                    <Skeleton className=\"h-6 w-16\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-slate-900\">قائمة القضايا</h2>\n        <div className=\"relative w-80\">\n          <Input\n            placeholder=\"البحث في القضايا...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-white border-0 shadow-md\"\n            data-testid=\"input-search-cases\"\n          />\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n        </div>\n      </div>\n      \n      <Card className=\"bg-white shadow-md border-0\">\n        <CardContent className=\"p-6\">\n          {filteredCases.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-500\">\n                {searchQuery ? \"لا توجد قضايا مطابقة لبحثك\" : \"لا توجد قضايا\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-slate-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                      رقم القضية\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                      العنوان\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                      النوع\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                      الحالة\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                      الأولوية\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                      المحكمة\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider\">\n                      إجراءات\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-slate-200\">\n                  {filteredCases.map((caseItem) => (\n                    <tr key={caseItem.id} className=\"hover:bg-slate-50\" data-testid={`case-row-${caseItem.id}`}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900\">\n                        {caseItem.caseNumber}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-700 max-w-xs truncate\">\n                        {caseItem.title}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-700\">\n                        {caseItem.caseType}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {getStatusBadge(caseItem.status)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {getPriorityBadge(caseItem.priority)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-700\">\n                        {caseItem.court || \"-\"}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                        <div className=\"flex space-x-2 space-x-reverse\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-case-${caseItem.id}`}>\n                            <Eye className=\"w-4 h-4 ml-1\" />\n                            عرض\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => onEdit(caseItem)}\n                            data-testid={`button-edit-case-${caseItem.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 ml-1\" />\n                            تعديل\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-700 hover:bg-red-50\" data-testid={`button-delete-case-${caseItem.id}`}>\n                                <Trash2 className=\"w-4 h-4 ml-1\" />\n                                حذف\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  هل أنت متأكد من حذف القضية \"{caseItem.title}\"؟ لا يمكن التراجع عن هذا الإجراء.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>إلغاء</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => deleteMutation.mutate(caseItem.id)}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  حذف\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10887},"client/src/components/clients/client-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { insertClientSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { X, Loader2 } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst clientFormSchema = insertClientSchema.extend({\n  name: z.string().min(1, \"اسم العميل مطلوب\"),\n  email: z.string().email(\"البريد الإلكتروني غير صحيح\").optional().or(z.literal(\"\")),\n  phone: z.string().min(1, \"رقم الهاتف مطلوب\"),\n});\n\ninterface ClientFormProps {\n  client?: any;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function ClientForm({ client: editClient, onClose, onSuccess }: ClientFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(clientFormSchema),\n    defaultValues: {\n      name: editClient?.name || \"\",\n      email: editClient?.email || \"\",\n      phone: editClient?.phone || \"\",\n      address: editClient?.address || \"\",\n      nationalId: editClient?.nationalId || \"\",\n      notes: editClient?.notes || \"\",\n      createdBy: user?.id || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof clientFormSchema>) => {\n      const res = await apiRequest(\"POST\", \"/api/clients\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({ title: \"تم إنشاء العميل بنجاح\" });\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"خطأ في إنشاء العميل\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof clientFormSchema>) => {\n      const res = await apiRequest(\"PUT\", `/api/clients/${editClient.id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({ title: \"تم تحديث العميل بنجاح\" });\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"خطأ في تحديث العميل\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof clientFormSchema>) => {\n    if (editClient) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>اسم العميل</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"محمد أحمد السالم\" {...field} data-testid=\"input-client-name\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رقم الهاتف</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"0501234567\" {...field} data-testid=\"input-client-phone\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>البريد الإلكتروني</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"mohammed@example.com\" \n                        {...field} \n                        data-testid=\"input-client-email\"\n                        className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"nationalId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رقم الهوية</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"1234567890\" {...field} data-testid=\"input-client-national-id\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>العنوان</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"العنوان التفصيلي للعميل\"\n                      rows={3}\n                      {...field} \n                      data-testid=\"textarea-client-address\"\n                      className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>ملاحظات</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"ملاحظات إضافية عن العميل\"\n                      rows={3}\n                      {...field} \n                      data-testid=\"textarea-client-notes\"\n                      className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2 space-x-reverse\">\n              <Button type=\"button\" onClick={onClose} data-testid=\"button-cancel\" className=\"bg-red-500 hover:bg-red-600 text-white border-0 rounded-lg\">\n                إلغاء\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-client\" className=\"bg-primary-600 hover:bg-primary-700 text-white rounded-lg\">\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"ml-2 h-4 w-4 animate-spin text-white\" />\n                    جاري الحفظ...\n                  </>\n                ) : (\n                  editClient ? \"تحديث العميل\" : \"إنشاء العميل\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n  );\n}\n","size_bytes":8170},"client/src/components/clients/client-list.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Eye, Edit, Trash2, Search, Phone, Mail, MapPin } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Client {\n  id: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  nationalId?: string;\n  notes?: string;\n  createdAt: string;\n}\n\ninterface ClientListProps {\n  clients: Client[] | undefined;\n  isLoading: boolean;\n  onEdit: (clientData: Client) => void;\n}\n\nexport default function ClientList({ clients, isLoading, onEdit }: ClientListProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/clients/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({ title: \"تم حذف العميل بنجاح\" });\n    },\n    onError: () => {\n      toast({ title: \"خطأ في حذف العميل\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredClients = clients?.filter(client =>\n    client.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    client.phone?.includes(searchQuery) ||\n    client.nationalId?.includes(searchQuery)\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-slate-900\">قائمة العملاء</h2>\n          <div className=\"relative w-80\">\n            <Input\n              placeholder=\"البحث في العملاء...\"\n              disabled\n              className=\"pl-10 bg-white border-0 shadow-md\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n          </div>\n        </div>\n        <Card className=\"bg-white shadow-md border-0\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"border border-slate-100 rounded-lg p-4 space-y-3\">\n                  <Skeleton className=\"h-5 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                  <Skeleton className=\"h-4 w-2/3\" />\n                  <div className=\"flex space-x-2 space-x-reverse\">\n                    <Skeleton className=\"h-8 w-16\" />\n                    <Skeleton className=\"h-8 w-16\" />\n                    <Skeleton className=\"h-8 w-16\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-slate-900\">قائمة العملاء</h2>\n        <div className=\"relative w-80\">\n          <Input\n            placeholder=\"البحث في العملاء...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-white border-0 shadow-md\"\n            data-testid=\"input-search-clients\"\n          />\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n        </div>\n      </div>\n      <Card className=\"bg-white shadow-md border-0\">\n        <CardContent className=\"p-6\">\n          {filteredClients.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-slate-500\">\n              {searchQuery ? \"لا يوجد عملاء مطابقون لبحثك\" : \"لا يوجد عملاء\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredClients.map((client) => (\n              <div\n                key={client.id}\n                className=\"border border-slate-200 rounded-lg p-6 space-y-4 hover:shadow-md transition-shadow\"\n                data-testid={`client-card-${client.id}`}\n              >\n                <div>\n                  <h3 className=\"text-lg font-semibold text-slate-900\">{client.name}</h3>\n                  {client.nationalId && (\n                    <p className=\"text-sm text-slate-500\">هوية: {client.nationalId}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  {client.phone && (\n                    <div className=\"flex items-center text-sm text-slate-600\">\n                      <Phone className=\"w-4 h-4 ml-2\" />\n                      {client.phone}\n                    </div>\n                  )}\n                  {client.email && (\n                    <div className=\"flex items-center text-sm text-slate-600\">\n                      <Mail className=\"w-4 h-4 ml-2\" />\n                      {client.email}\n                    </div>\n                  )}\n                  {client.address && (\n                    <div className=\"flex items-start text-sm text-slate-600\">\n                      <MapPin className=\"w-4 h-4 ml-2 mt-0.5 flex-shrink-0\" />\n                      <span className=\"line-clamp-2\">{client.address}</span>\n                    </div>\n                  )}\n                </div>\n\n                {client.notes && (\n                  <div className=\"pt-2 border-t border-slate-100\">\n                    <p className=\"text-sm text-slate-600 line-clamp-2\">{client.notes}</p>\n                  </div>\n                )}\n\n                <div className=\"flex justify-end space-x-2 space-x-reverse pt-2\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-client-${client.id}`}>\n                    <Eye className=\"w-4 h-4 ml-1\" />\n                    عرض\n                  </Button>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    onClick={() => onEdit(client)}\n                    data-testid={`button-edit-client-${client.id}`}\n                  >\n                    <Edit className=\"w-4 h-4 ml-1\" />\n                    تعديل\n                  </Button>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        data-testid={`button-delete-client-${client.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 ml-1\" />\n                        حذف\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          هل أنت متأكد من حذف العميل \"{client.name}\"؟ لا يمكن التراجع عن هذا الإجراء.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>إلغاء</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteMutation.mutate(client.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          حذف\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </div>\n            ))}\n          </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8480},"client/src/components/dashboard/recent-cases.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Eye, Edit } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface Case {\n  id: string;\n  caseNumber: string;\n  title: string;\n  status: string;\n  priority: string;\n  clientId: string;\n}\n\ninterface RecentCasesProps {\n  cases: Case[] | undefined;\n  isLoading: boolean;\n}\n\nexport default function RecentCases({ cases, isLoading }: RecentCasesProps) {\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      active: \"default\",\n      pending: \"secondary\",\n      closed: \"outline\",\n    };\n    \n    const labels: Record<string, string> = {\n      active: \"نشطة\",\n      pending: \"معلقة\",\n      closed: \"مغلقة\",\n    };\n\n    return (\n      <Badge variant={variants[status] || \"outline\"}>\n        {labels[status] || status}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      high: \"destructive\",\n      medium: \"secondary\",\n      low: \"outline\",\n      urgent: \"destructive\",\n    };\n    \n    const labels: Record<string, string> = {\n      high: \"عالية\",\n      medium: \"متوسطة\",\n      low: \"منخفضة\",\n      urgent: \"عاجلة\",\n    };\n\n    return (\n      <Badge variant={variants[priority] || \"outline\"}>\n        {labels[priority] || priority}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-md hover:shadow-lg transition-shadow duration-200 border-0 bg-white dark:bg-gray-800 rounded-xl\">\n        <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 bg-slate-50 dark:bg-gray-700/50 rounded-t-xl\">\n          <CardTitle className=\"text-slate-900 dark:text-white\">القضايا الحديثة</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"space-y-4 p-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-4 border border-slate-100 dark:border-gray-600 rounded-lg bg-slate-50 dark:bg-gray-700/30\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-32\" />\n                  <Skeleton className=\"h-3 w-24\" />\n                </div>\n                <div className=\"flex space-x-2 space-x-reverse\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const recentCases = cases?.slice(0, 5) || [];\n\n  return (\n    <Card className=\"shadow-md hover:shadow-lg transition-shadow duration-200 border-0 bg-white dark:bg-gray-800 rounded-xl\">\n      <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 bg-slate-50 dark:bg-gray-700/50 rounded-t-xl\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-slate-900 dark:text-white\">القضايا الحديثة</CardTitle>\n          <Link href=\"/cases\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-primary-600 hover:text-primary-700 hover:bg-primary-50 dark:text-primary-400 dark:hover:text-primary-300 dark:hover:bg-primary-900/20\" data-testid=\"button-view-all-cases\">\n              عرض الكل\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      \n      {recentCases.length === 0 ? (\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-slate-500\">لا توجد قضايا حديثة</p>\n          </div>\n        </CardContent>\n      ) : (\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-slate-50 dark:bg-gray-700/50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    رقم القضية\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    العنوان\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    الحالة\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    الأولوية\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">\n                    إجراءات\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-slate-200 dark:divide-gray-700\">\n                {recentCases.map((caseItem) => (\n                  <tr key={caseItem.id} className=\"hover:bg-slate-50 dark:hover:bg-gray-700/50 transition-colors\" data-testid={`case-row-${caseItem.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900 dark:text-white\">\n                      {caseItem.caseNumber}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-700 dark:text-slate-300\">\n                      {caseItem.title}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {getStatusBadge(caseItem.status)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {getPriorityBadge(caseItem.priority)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      <div className=\"flex space-x-2 space-x-reverse\">\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-case-${caseItem.id}`}>\n                          <Eye className=\"w-4 h-4 ml-1\" />\n                          عرض\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-case-${caseItem.id}`}>\n                          <Edit className=\"w-4 h-4 ml-1\" />\n                          تعديل\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}\n","size_bytes":6951},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Briefcase, Users, CheckSquare, FileText } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface StatsCardsProps {\n  stats: {\n    activeCases: number;\n    newClients: number;\n    pendingTasks: number;\n    recentDocuments: number;\n  } | undefined;\n  isLoading: boolean;\n}\n\nexport default function StatsCards({ stats, isLoading }: StatsCardsProps) {\n  const statsData = [\n    {\n      label: \"القضايا النشطة\",\n      value: stats?.activeCases || 0,\n      change: \"+12% من الشهر السابق\",\n      icon: Briefcase,\n      color: \"bg-primary-100 text-primary-600\",\n    },\n    {\n      label: \"العملاء الجدد\",\n      value: stats?.newClients || 0,\n      change: \"+3 هذا الأسبوع\",\n      icon: Users,\n      color: \"bg-emerald-100 text-emerald-600\",\n    },\n    {\n      label: \"المهام المعلقة\",\n      value: stats?.pendingTasks || 0,\n      change: \"5 مستحقة اليوم\",\n      icon: CheckSquare,\n      color: \"bg-amber-100 text-amber-600\",\n    },\n    {\n      label: \"المستندات الجديدة\",\n      value: stats?.recentDocuments || 0,\n      change: \"تم رفع 15 اليوم\",\n      icon: FileText,\n      color: \"bg-blue-100 text-blue-600\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-20\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                  <Skeleton className=\"h-3 w-24\" />\n                </div>\n                <Skeleton className=\"w-12 h-12 rounded-lg\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {statsData.map((stat, index) => {\n        const Icon = stat.icon;\n        return (\n          <Card key={index} className=\"shadow-md hover:shadow-lg transition-shadow duration-200 border-0 bg-white dark:bg-gray-800 rounded-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\" data-testid={`stat-label-${index}`}>\n                    {stat.label}\n                  </p>\n                  <p className=\"text-3xl font-bold text-slate-900 dark:text-white mt-2\" data-testid={`stat-value-${index}`}>\n                    {stat.value}\n                  </p>\n                  <p className=\"text-sm text-emerald-600 dark:text-emerald-400 mt-1\" data-testid={`stat-change-${index}`}>\n                    {stat.change}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${stat.color} rounded-xl flex items-center justify-center shadow-sm`}>\n                  <Icon className=\"w-6 h-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3293},"client/src/components/dashboard/tasks-sidebar.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\ninterface Task {\n  id: string;\n  title: string;\n  dueDate: string | null;\n  priority: string;\n  status: string;\n}\n\ninterface TasksSidebarProps {\n  tasks: Task[] | undefined;\n  isLoading: boolean;\n}\n\nexport default function TasksSidebar({ tasks, isLoading }: TasksSidebarProps) {\n  const getPriorityColor = (priority: string) => {\n    const colors: Record<string, string> = {\n      high: \"bg-red-500\",\n      medium: \"bg-amber-500\",\n      low: \"bg-primary-500\",\n      urgent: \"bg-red-600\",\n    };\n    return colors[priority] || \"bg-slate-500\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm border border-slate-200\">\n        <CardHeader className=\"border-b border-slate-200\">\n          <CardTitle>المهام القادمة</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6 space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"flex items-start space-x-3 space-x-reverse\">\n              <Skeleton className=\"w-2 h-2 rounded-full mt-2\" />\n              <div className=\"flex-1 space-y-2\">\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-3 w-20\" />\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const upcomingTasks = tasks?.filter(task => task.status === \"pending\").slice(0, 5) || [];\n\n  return (\n    <Card className=\"shadow-md hover:shadow-lg transition-shadow duration-200 border-0 bg-white dark:bg-gray-800 rounded-xl\">\n      <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 bg-slate-50 dark:bg-gray-700/50 rounded-t-xl\">\n        <CardTitle className=\"text-slate-900 dark:text-white\">المهام القادمة</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6 space-y-4\">\n        {upcomingTasks.length === 0 ? (\n          <div className=\"text-center py-4\">\n            <p className=\"text-slate-500 text-sm\">لا توجد مهام معلقة</p>\n          </div>\n        ) : (\n          <>\n            {upcomingTasks.map((task) => (\n              <div key={task.id} className=\"flex items-start space-x-3 space-x-reverse\" data-testid={`task-${task.id}`}>\n                <div className={`w-2 h-2 ${getPriorityColor(task.priority)} rounded-full mt-2 flex-shrink-0`} />\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-slate-900 dark:text-white\" data-testid={`task-title-${task.id}`}>\n                    {task.title}\n                  </p>\n                  {task.dueDate && (\n                    <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\" data-testid={`task-date-${task.id}`}>\n                      {format(new Date(task.dueDate), \"PPP\", { locale: ar })}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n            \n            <Link href=\"/tasks\">\n              <Button \n                variant=\"ghost\" \n                className=\"w-full text-center text-sm font-medium pt-4 border-t border-slate-100 dark:border-gray-700 text-primary-600 hover:text-primary-700 hover:bg-primary-50 dark:text-primary-400 dark:hover:text-primary-300 dark:hover:bg-primary-900/20\"\n                data-testid=\"button-view-all-tasks\"\n              >\n                عرض جميع المهام\n              </Button>\n            </Link>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3725},"client/src/components/documents/document-list.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Download, Trash2, Search, FileText, File } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\ninterface Document {\n  id: string;\n  title: string;\n  filename: string;\n  fileSize: number;\n  mimeType: string;\n  documentType: string;\n  caseId?: string;\n  clientId?: string;\n  createdAt: string;\n}\n\ninterface DocumentListProps {\n  documents: Document[] | undefined;\n  isLoading: boolean;\n}\n\nexport default function DocumentList({ documents, isLoading }: DocumentListProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/documents/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      toast({ title: \"تم حذف المستند بنجاح\" });\n    },\n    onError: () => {\n      toast({ title: \"خطأ في حذف المستند\", variant: \"destructive\" });\n    },\n  });\n\n  const handleDownload = (documentId: string, filename: string) => {\n    const link = document.createElement('a');\n    link.href = `/api/documents/${documentId}/download`;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const getDocumentTypeBadge = (type: string) => {\n    const labels: Record<string, string> = {\n      case_file: \"مستندات القضية\",\n      client_correspondence: \"مراسلات العميل\",\n      court_document: \"أوراق المحكمة\",\n      contract: \"عقود واتفاقيات\",\n      other: \"أخرى\",\n    };\n\n    const colors: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      case_file: \"default\",\n      client_correspondence: \"secondary\",\n      court_document: \"destructive\",\n      contract: \"outline\",\n      other: \"outline\",\n    };\n\n    return (\n      <Badge variant={colors[type] || \"outline\"}>\n        {labels[type] || type}\n      </Badge>\n    );\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.includes('pdf')) return <File className=\"w-5 h-5 text-red-500\" />;\n    if (mimeType.includes('word') || mimeType.includes('document')) return <FileText className=\"w-5 h-5 text-blue-500\" />;\n    if (mimeType.includes('image')) return <File className=\"w-5 h-5 text-green-500\" />;\n    return <File className=\"w-5 h-5 text-slate-500\" />;\n  };\n\n  const filteredDocuments = documents?.filter(doc =>\n    doc.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doc.filename.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-slate-900\">قائمة المستندات</h2>\n          <div className=\"relative w-80\">\n            <Input\n              placeholder=\"البحث في المستندات...\"\n              disabled\n              className=\"pl-10 bg-white border-0 shadow-md\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n          </div>\n        </div>\n        <Card className=\"bg-white shadow-md border-0\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"border border-slate-100 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-center space-x-3 space-x-reverse\">\n                    <Skeleton className=\"h-10 w-10 rounded\" />\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"h-3 w-20\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-6 w-24\" />\n                  <div className=\"flex justify-end space-x-2 space-x-reverse\">\n                    <Skeleton className=\"h-8 w-16\" />\n                    <Skeleton className=\"h-8 w-16\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-slate-900\">قائمة المستندات</h2>\n        <div className=\"relative w-80\">\n          <Input\n            placeholder=\"البحث في المستندات...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-white border-0 shadow-md\"\n            data-testid=\"input-search-documents\"\n          />\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n        </div>\n      </div>\n      <Card className=\"bg-white shadow-md border-0\">\n        <CardContent className=\"p-6\">\n        {filteredDocuments.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-slate-500\">\n              {searchQuery ? \"لا توجد مستندات مطابقة لبحثك\" : \"لا توجد مستندات\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredDocuments.map((document) => (\n              <div\n                key={document.id}\n                className=\"border border-slate-200 rounded-lg p-6 space-y-4 hover:shadow-md transition-shadow\"\n                data-testid={`document-card-${document.id}`}\n              >\n                <div className=\"flex items-start space-x-3 space-x-reverse\">\n                  {getFileIcon(document.mimeType)}\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"text-sm font-semibold text-slate-900 truncate\">\n                      {document.title}\n                    </h3>\n                    <p className=\"text-xs text-slate-500 truncate\">\n                      {document.filename}\n                    </p>\n                    <p className=\"text-xs text-slate-400\">\n                      {formatFileSize(document.fileSize)}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {getDocumentTypeBadge(document.documentType)}\n                  <p className=\"text-xs text-slate-500\">\n                    {format(new Date(document.createdAt), \"PPP\", { locale: ar })}\n                  </p>\n                </div>\n\n                <div className=\"flex justify-end space-x-2 space-x-reverse\">\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => handleDownload(document.id, document.filename)}\n                    data-testid={`button-download-document-${document.id}`}\n                  >\n                    <Download className=\"w-4 h-4 ml-1\" />\n                    تحميل\n                  </Button>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        data-testid={`button-delete-document-${document.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 ml-1\" />\n                        حذف\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          هل أنت متأكد من حذف المستند \"{document.title}\"؟ لا يمكن التراجع عن هذا الإجراء.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>إلغاء</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteMutation.mutate(document.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          حذف\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9804},"client/src/components/documents/document-upload.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { X, Loader2, Upload, FileText } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst uploadFormSchema = z.object({\n  title: z.string().min(1, \"عنوان المستند مطلوب\"),\n  documentType: z.string().min(1, \"نوع المستند مطلوب\"),\n  caseId: z.string().optional(),\n  clientId: z.string().optional(),\n});\n\ninterface DocumentUploadProps {\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function DocumentUpload({ onClose, onSuccess }: DocumentUploadProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: cases } = useQuery({\n    queryKey: [\"/api/cases\"],\n  }) as { data: any[] | undefined };\n\n  const { data: clients } = useQuery({\n    queryKey: [\"/api/clients\"],\n  }) as { data: any[] | undefined };\n\n  const form = useForm({\n    resolver: zodResolver(uploadFormSchema),\n    defaultValues: {\n      title: \"\",\n      documentType: \"\",\n      caseId: \"\",\n      clientId: \"\",\n    },\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof uploadFormSchema>) => {\n      if (!selectedFile) {\n        throw new Error(\"لم يتم اختيار ملف\");\n      }\n\n      const formData = new FormData();\n      formData.append(\"file\", selectedFile);\n      formData.append(\"title\", data.title);\n      formData.append(\"documentType\", data.documentType);\n      if (data.caseId) formData.append(\"caseId\", data.caseId);\n      if (data.clientId) formData.append(\"clientId\", data.clientId);\n\n      const res = await fetch(\"/api/documents/upload\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!res.ok) {\n        throw new Error(\"فشل في رفع المستند\");\n      }\n\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      toast({ title: \"تم رفع المستند بنجاح\" });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"خطأ في رفع المستند\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof uploadFormSchema>) => {\n    uploadMutation.mutate(data);\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      if (!form.getValues(\"title\")) {\n        form.setValue(\"title\", file.name);\n      }\n    }\n  };\n\n  const isLoading = uploadMutation.isPending;\n\n  return (\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* File Upload Area */}\n            <div className=\"space-y-4\">\n              <Label>اختيار الملف</Label>\n              <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-8 text-center hover:border-primary-400 transition-colors\">\n                {selectedFile ? (\n                  <div className=\"space-y-2\">\n                    <FileText className=\"mx-auto h-12 w-12 text-green-500\" />\n                    <p className=\"text-sm font-medium text-slate-900\">{selectedFile.name}</p>\n                    <p className=\"text-xs text-slate-500\">\n                      {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n                    </p>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setSelectedFile(null)}\n                    >\n                      إزالة الملف\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Upload className=\"mx-auto h-12 w-12 text-slate-400\" />\n                    <p className=\"text-slate-600\">اسحب وأفلت الملف هنا أو</p>\n                    <Label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                      <Button type=\"button\" variant=\"outline\" asChild>\n                        <span>اختر الملف</span>\n                      </Button>\n                    </Label>\n                    <p className=\"text-xs text-slate-500\">PDF, DOC, DOCX, JPG, PNG حتى 10MB</p>\n                  </div>\n                )}\n                <input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  className=\"hidden\"\n                  accept=\".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png\"\n                  onChange={handleFileChange}\n                  data-testid=\"input-file\"\n                />\n              </div>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>عنوان المستند</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"عنوان المستند\" {...field} data-testid=\"input-document-title\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"documentType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>نوع المستند</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-document-type\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                        <SelectValue placeholder=\"اختر نوع المستند\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                      <SelectItem value=\"case_file\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">مستندات القضية</SelectItem>\n                      <SelectItem value=\"client_correspondence\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">مراسلات العميل</SelectItem>\n                      <SelectItem value=\"court_document\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">أوراق المحكمة</SelectItem>\n                      <SelectItem value=\"contract\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">عقود واتفاقيات</SelectItem>\n                      <SelectItem value=\"other\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">أخرى</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"caseId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ربط بقضية (اختياري)</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-case\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue placeholder=\"اختر القضية\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        {cases?.map((caseItem: any) => (\n                          <SelectItem key={caseItem.id} value={caseItem.id} className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">\n                            {caseItem.caseNumber} - {caseItem.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"clientId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ربط بعميل (اختياري)</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-client\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue placeholder=\"اختر العميل\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        {clients?.map((client: any) => (\n                          <SelectItem key={client.id} value={client.id} className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">\n                            {client.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 space-x-reverse\">\n              <Button type=\"button\" onClick={onClose} data-testid=\"button-cancel\" className=\"bg-red-500 hover:bg-red-600 text-white border-0 rounded-lg\">\n                إلغاء\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isLoading || !selectedFile} \n                data-testid=\"button-upload\"\n                className=\"bg-primary-600 hover:bg-primary-700 text-white rounded-lg\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"ml-2 h-4 w-4 animate-spin text-white\" />\n                    جاري الرفع...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"ml-2 h-4 w-4 text-white\" />\n                    رفع المستند\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n  );\n}\n","size_bytes":11763},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Menu, Search, Bell, Globe } from \"lucide-react\";\nimport Sidebar from \"./sidebar\";\n\nexport default function Header() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [currentLanguage, setCurrentLanguage] = useState(\"ar\");\n\n  return (\n    <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Mobile menu button */}\n        <Sheet>\n          <SheetTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"p-0 w-64\">\n            <Sidebar />\n          </SheetContent>\n        </Sheet>\n\n        {/* Breadcrumbs */}\n        <div className=\"hidden md:flex items-center space-x-2 space-x-reverse\">\n          <span className=\"text-sm text-slate-500\">لوحة التحكم</span>\n        </div>\n\n        {/* Header Actions */}\n        <div className=\"flex items-center space-x-4 space-x-reverse\">\n          {/* Search */}\n          <div className=\"relative hidden md:block\">\n            <Input\n              type=\"text\"\n              placeholder=\"البحث في القضايا والعملاء...\"\n              className=\"w-80 pl-10 pr-4 bg-white border border-gray-200\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n          </div>\n\n          {/* Language Dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-language\">\n                <Globe className=\"h-5 w-5\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              <DropdownMenuItem \n                onClick={() => setCurrentLanguage(\"ar\")}\n                className={`cursor-pointer ${currentLanguage === \"ar\" ? \"bg-primary-50 text-primary-600\" : \"\"}`}\n                data-testid=\"menu-language-arabic\"\n              >\n                <span className=\"ml-2\">🇸🇦</span>\n                العربية\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => setCurrentLanguage(\"en\")}\n                className={`cursor-pointer ${currentLanguage === \"en\" ? \"bg-primary-50 text-primary-600\" : \"\"}`}\n                data-testid=\"menu-language-english\"\n              >\n                <span className=\"ml-2\">🇺🇸</span>\n                English\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n            <Bell className=\"h-5 w-5\" />\n            <Badge className=\"absolute -top-1 -right-1 w-2 h-2 p-0 bg-red-500\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3541},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Scale, \n  LayoutDashboard, \n  Briefcase, \n  Users, \n  FileText, \n  CheckSquare, \n  BarChart3, \n  ShieldQuestion, \n  History, \n  Settings, \n  LogOut \n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst navigationItems = [\n  {\n    name: \"لوحة التحكم\",\n    href: \"/\",\n    icon: LayoutDashboard,\n    roles: [\"admin\", \"lawyer\", \"secretary\"],\n  },\n  {\n    name: \"القضايا\",\n    href: \"/cases\",\n    icon: Briefcase,\n    roles: [\"admin\", \"lawyer\", \"secretary\"],\n    badge: \"12\",\n  },\n  {\n    name: \"العملاء\",\n    href: \"/clients\",\n    icon: Users,\n    roles: [\"admin\", \"lawyer\", \"secretary\"],\n  },\n  {\n    name: \"المستندات\",\n    href: \"/documents\",\n    icon: FileText,\n    roles: [\"admin\", \"lawyer\", \"secretary\"],\n  },\n  {\n    name: \"المهام\",\n    href: \"/tasks\",\n    icon: CheckSquare,\n    roles: [\"admin\", \"lawyer\", \"secretary\"],\n    badge: \"5\",\n  },\n  {\n    name: \"التقارير\",\n    href: \"/reports\",\n    icon: BarChart3,\n    roles: [\"admin\", \"lawyer\"],\n  },\n];\n\nconst adminItems = [\n  {\n    name: \"المستخدمين\",\n    href: \"/users\",\n    icon: ShieldQuestion,\n    roles: [\"admin\"],\n  },\n  {\n    name: \"سجل الأنشطة\",\n    href: \"/audit\",\n    icon: History,\n    roles: [\"admin\"],\n  },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user, logoutMutation } = useAuth();\n\n  if (!user) return null;\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <div className=\"hidden md:flex md:w-64 md:flex-col\">\n      <div className=\"flex flex-col flex-grow pt-5 overflow-y-auto bg-white border-l border-slate-200\">\n        {/* Logo and Brand */}\n        <div className=\"flex items-center px-6 pb-4\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center\">\n              <Scale className=\"text-white w-4 h-4\" />\n            </div>\n            <div className=\"mr-3\">\n              <h1 className=\"text-lg font-bold text-slate-900\">Lexora</h1>\n              <p className=\"text-xs text-slate-500\">نظام إدارة قانوني</p>\n            </div>\n          </div>\n        </div>\n\n        {/* User Profile */}\n        <div className=\"px-6 pb-4 border-b border-slate-100\">\n          <div className=\"flex items-center\">\n            <div className=\"w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-600 font-medium text-sm\">\n                {user.fullName.charAt(0)}\n              </span>\n            </div>\n            <div className=\"mr-3\">\n              <p className=\"text-sm font-medium text-slate-900\" data-testid=\"text-username\">\n                {user.fullName}\n              </p>\n              <p className=\"text-xs text-slate-500\" data-testid=\"text-user-role\">\n                {user.role === \"admin\" ? \"مدير\" : \n                 user.role === \"lawyer\" ? \"محامي\" : \"سكرتير\"}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 px-4 py-4 space-y-1\">\n          {navigationItems.map((item) => {\n            if (!item.roles.includes(user.role)) return null;\n            \n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.href} href={item.href}>\n                <div\n                  className={cn(\n                    \"group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors cursor-pointer\",\n                    isActive\n                      ? \"text-white bg-primary-600\"\n                      : \"text-slate-700 hover:bg-slate-100 hover:text-slate-900\"\n                  )}\n                  data-testid={`nav-${item.href.slice(1) || 'dashboard'}`}\n                >\n                  <Icon className=\"ml-3 w-4 h-4\" />\n                  {item.name}\n                  {item.badge && (\n                    <Badge \n                      variant={isActive ? \"secondary\" : \"outline\"} \n                      className=\"mr-auto text-xs\"\n                    >\n                      {item.badge}\n                    </Badge>\n                  )}\n                </div>\n              </Link>\n            );\n          })}\n\n          {/* Admin Only Navigation */}\n          {user.role === \"admin\" && (\n            <div className=\"pt-4 border-t border-slate-100\">\n              <p className=\"px-3 text-xs font-semibold text-slate-500 uppercase tracking-wider\">\n                الإدارة\n              </p>\n              {adminItems.map((item) => {\n                const isActive = location === item.href;\n                const Icon = item.icon;\n                \n                return (\n                  <Link key={item.href} href={item.href}>\n                    <div\n                      className={cn(\n                        \"group flex items-center px-3 py-2 mt-2 text-sm font-medium rounded-lg transition-colors cursor-pointer\",\n                        isActive\n                          ? \"text-white bg-primary-600\"\n                          : \"text-slate-700 hover:bg-slate-100 hover:text-slate-900\"\n                      )}\n                      data-testid={`nav-${item.href.slice(1)}`}\n                    >\n                      <Icon className=\"ml-3 w-4 h-4\" />\n                      {item.name}\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          )}\n        </nav>\n\n        {/* Settings and Logout */}\n        <div className=\"px-4 py-4 border-t border-slate-100\">\n          <Link href=\"/settings\">\n            <a\n              className=\"group flex items-center px-3 py-2 text-sm font-medium text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900 mb-2\"\n              data-testid=\"nav-settings\"\n            >\n              <Settings className=\"ml-3 w-4 h-4\" />\n              الإعدادات\n            </a>\n          </Link>\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50\"\n            onClick={handleLogout}\n            disabled={logoutMutation.isPending}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"ml-3 w-4 h-4\" />\n            تسجيل الخروج\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6640},"client/src/components/tasks/task-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertTaskSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { X, Loader2, Calendar } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst taskFormSchema = insertTaskSchema.extend({\n  title: z.string().min(1, \"عنوان المهمة مطلوب\"),\n  assignedToId: z.string().min(1, \"المكلف بالمهمة مطلوب\"),\n  dueDate: z.string().optional(),\n});\n\ninterface TaskFormProps {\n  task?: any;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function TaskForm({ task: editTask, onClose, onSuccess }: TaskFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: cases } = useQuery({\n    queryKey: [\"/api/cases\"],\n  }) as { data: any[] | undefined };\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/users\"],\n    queryFn: () => fetch(\"/api/users\").then(res => res.json()).then(users => \n      users.filter((u: any) => u.isActive)\n    ),\n  }) as { data: any[] | undefined };\n\n  const form = useForm({\n    resolver: zodResolver(taskFormSchema),\n    defaultValues: {\n      title: editTask?.title || \"\",\n      description: editTask?.description || \"\",\n      status: editTask?.status || \"pending\",\n      priority: editTask?.priority || \"medium\",\n      dueDate: editTask?.dueDate ? new Date(editTask.dueDate).toISOString().split('T')[0] : \"\",\n      caseId: editTask?.caseId || \"\",\n      assignedToId: editTask?.assignedToId || \"\",\n      createdBy: user?.id || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof taskFormSchema>) => {\n      const taskData = {\n        ...data,\n        dueDate: data.dueDate ? new Date(data.dueDate).toISOString() : null,\n      };\n      const res = await apiRequest(\"POST\", \"/api/tasks\", taskData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"تم إنشاء المهمة بنجاح\" });\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"خطأ في إنشاء المهمة\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof taskFormSchema>) => {\n      const taskData = {\n        ...data,\n        dueDate: data.dueDate ? new Date(data.dueDate).toISOString() : null,\n      };\n      const res = await apiRequest(\"PUT\", `/api/tasks/${editTask.id}`, taskData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"تم تحديث المهمة بنجاح\" });\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"خطأ في تحديث المهمة\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof taskFormSchema>) => {\n    if (editTask) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>عنوان المهمة</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"مراجعة مستندات القضية\" {...field} data-testid=\"input-task-title\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>وصف المهمة</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"وصف تفصيلي للمهمة\"\n                      rows={3}\n                      {...field} \n                      data-testid=\"textarea-task-description\"\n                      className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الحالة</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-status\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        <SelectItem value=\"pending\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">معلقة</SelectItem>\n                        <SelectItem value=\"in_progress\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">قيد التنفيذ</SelectItem>\n                        <SelectItem value=\"completed\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">مكتملة</SelectItem>\n                        <SelectItem value=\"cancelled\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">ملغية</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الأولوية</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-priority\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        <SelectItem value=\"low\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">منخفضة</SelectItem>\n                        <SelectItem value=\"medium\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">متوسطة</SelectItem>\n                        <SelectItem value=\"high\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">عالية</SelectItem>\n                        <SelectItem value=\"urgent\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">عاجلة</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>تاريخ الاستحقاق</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input \n                          type=\"date\"\n                          {...field} \n                          data-testid=\"input-due-date\"\n                          className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\"\n                        />\n                        <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4 pointer-events-none\" />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"assignedToId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>المكلف بالمهمة</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-assigned-to\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue placeholder=\"اختر المكلف\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        {users?.map((user: any) => (\n                          <SelectItem key={user.id} value={user.id} className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">\n                            {user.fullName} ({user.role === \"admin\" ? \"مدير\" : \n                             user.role === \"lawyer\" ? \"محامي\" : \"سكرتير\"})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"caseId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ربط بقضية (اختياري)</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-case\" className=\"bg-white border border-gray-200 focus:border-primary-300 transition-all\">\n                          <SelectValue placeholder=\"اختر القضية\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                        {cases?.map((caseItem: any) => (\n                          <SelectItem key={caseItem.id} value={caseItem.id} className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">\n                            {caseItem.caseNumber} - {caseItem.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 space-x-reverse\">\n              <Button type=\"button\" onClick={onClose} data-testid=\"button-cancel\" className=\"bg-red-500 hover:bg-red-600 text-white border-0 rounded-lg\">\n                إلغاء\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-task\" className=\"bg-primary-600 hover:bg-primary-700 text-white rounded-lg\">\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"ml-2 h-4 w-4 animate-spin text-white\" />\n                    جاري الحفظ...\n                  </>\n                ) : (\n                  editTask ? \"تحديث المهمة\" : \"إنشاء المهمة\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n  );\n}\n","size_bytes":13309},"client/src/components/tasks/task-list.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Edit, Trash2, Search, Calendar, CheckCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\ninterface Task {\n  id: string;\n  title: string;\n  description?: string;\n  status: string;\n  priority: string;\n  dueDate?: string;\n  caseId?: string;\n  assignedToId: string;\n  createdAt: string;\n}\n\ninterface TaskListProps {\n  tasks: Task[] | undefined;\n  isLoading: boolean;\n  onEdit: (taskData: Task) => void;\n}\n\nexport default function TaskList({ tasks, isLoading, onEdit }: TaskListProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/tasks/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"تم حذف المهمة بنجاح\" });\n    },\n    onError: () => {\n      toast({ title: \"خطأ في حذف المهمة\", variant: \"destructive\" });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const res = await apiRequest(\"PUT\", `/api/tasks/${id}`, { status });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"تم تحديث حالة المهمة بنجاح\" });\n    },\n    onError: () => {\n      toast({ title: \"خطأ في تحديث المهمة\", variant: \"destructive\" });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      pending: \"outline\",\n      in_progress: \"default\",\n      completed: \"secondary\",\n      cancelled: \"destructive\",\n    };\n    \n    const labels: Record<string, string> = {\n      pending: \"معلقة\",\n      in_progress: \"قيد التنفيذ\",\n      completed: \"مكتملة\",\n      cancelled: \"ملغية\",\n    };\n\n    return (\n      <Badge variant={variants[status] || \"outline\"}>\n        {labels[status] || status}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      high: \"destructive\",\n      medium: \"secondary\",\n      low: \"outline\",\n      urgent: \"destructive\",\n    };\n    \n    const labels: Record<string, string> = {\n      high: \"عالية\",\n      medium: \"متوسطة\",\n      low: \"منخفضة\",\n      urgent: \"عاجلة\",\n    };\n\n    return (\n      <Badge variant={variants[priority] || \"outline\"}>\n        {labels[priority] || priority}\n      </Badge>\n    );\n  };\n\n  const filteredTasks = tasks?.filter(task => {\n    const matchesSearch = task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         task.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || task.status === statusFilter;\n    const matchesPriority = priorityFilter === \"all\" || task.priority === priorityFilter;\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  }) || [];\n\n  if (isLoading) {\n    return (\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-slate-900\">قائمة المهام</h2>\n          <div className=\"flex space-x-4 space-x-reverse\">\n            <div className=\"relative w-80\">\n              <Input\n                placeholder=\"البحث في المهام...\"\n                disabled\n                className=\"pl-10 bg-white border-0 shadow-md\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n            </div>\n          </div>\n        </div>\n        <Card className=\"bg-white shadow-md border-0\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"border border-slate-100 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Skeleton className=\"h-5 w-48\" />\n                    <div className=\"flex space-x-2 space-x-reverse\">\n                      <Skeleton className=\"h-6 w-16\" />\n                      <Skeleton className=\"h-6 w-16\" />\n                    </div>\n                  </div>\n                  <Skeleton className=\"h-4 w-full\" />\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-4 w-24\" />\n                    <div className=\"flex space-x-2 space-x-reverse\">\n                      <Skeleton className=\"h-8 w-16\" />\n                      <Skeleton className=\"h-8 w-16\" />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-slate-900\">قائمة المهام</h2>\n        <div className=\"flex space-x-4 space-x-reverse\">\n          <div className=\"relative w-80\">\n            <Input\n              placeholder=\"البحث في المهام...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 bg-white border-0 shadow-md\"\n              data-testid=\"input-search-tasks\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n          </div>\n        </div>\n      </div>\n      \n      <Card className=\"bg-white shadow-md border-0\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex space-x-4 space-x-reverse mb-6\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40 bg-white border border-gray-200 focus:border-primary-300 transition-all\" data-testid=\"select-filter-status\">\n                <SelectValue placeholder=\"تصفية الحالة\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                <SelectItem value=\"all\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">جميع الحالات</SelectItem>\n                <SelectItem value=\"pending\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">معلقة</SelectItem>\n                <SelectItem value=\"in_progress\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">قيد التنفيذ</SelectItem>\n                <SelectItem value=\"completed\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">مكتملة</SelectItem>\n                <SelectItem value=\"cancelled\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">ملغية</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n              <SelectTrigger className=\"w-40 bg-white border border-gray-200 focus:border-primary-300 transition-all\" data-testid=\"select-filter-priority\">\n                <SelectValue placeholder=\"تصفية الأولوية\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-white border border-gray-200 shadow-lg\">\n                <SelectItem value=\"all\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">جميع الأولويات</SelectItem>\n                <SelectItem value=\"low\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">منخفضة</SelectItem>\n                <SelectItem value=\"medium\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">متوسطة</SelectItem>\n                <SelectItem value=\"high\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">عالية</SelectItem>\n                <SelectItem value=\"urgent\" className=\"focus:bg-primary-50 focus:text-primary-700 data-[highlighted]:bg-primary-100 data-[highlighted]:text-primary-800\">عاجلة</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {filteredTasks.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-500\">\n                {searchQuery || statusFilter !== \"all\" || priorityFilter !== \"all\" \n                  ? \"لا توجد مهام مطابقة للفلاتر المحددة\" \n                  : \"لا توجد مهام\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredTasks.map((task) => (\n              <div\n                key={task.id}\n                className=\"border border-slate-200 rounded-lg p-6 hover:shadow-md transition-shadow\"\n                data-testid={`task-card-${task.id}`}\n              >\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">\n                      {task.title}\n                    </h3>\n                    {task.description && (\n                      <p className=\"text-slate-600 text-sm mb-3\">\n                        {task.description}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex space-x-2 space-x-reverse\">\n                    {getStatusBadge(task.status)}\n                    {getPriorityBadge(task.priority)}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4 space-x-reverse text-sm text-slate-500\">\n                    {task.dueDate && (\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"w-4 h-4 ml-1\" />\n                        {format(new Date(task.dueDate), \"PPP\", { locale: ar })}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex space-x-2 space-x-reverse\">\n                    {task.status !== \"completed\" && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => updateStatusMutation.mutate({ \n                          id: task.id, \n                          status: \"completed\" \n                        })}\n                        data-testid={`button-complete-task-${task.id}`}\n                      >\n                        <CheckCircle className=\"w-4 h-4 ml-1\" />\n                        إكمال\n                      </Button>\n                    )}\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      onClick={() => onEdit(task)}\n                      data-testid={`button-edit-task-${task.id}`}\n                    >\n                      <Edit className=\"w-4 h-4 ml-1\" />\n                      تعديل\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          data-testid={`button-delete-task-${task.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4 ml-1\" />\n                          حذف\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>تأكيد الحذف</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            هل أنت متأكد من حذف المهمة \"{task.title}\"؟ لا يمكن التراجع عن هذا الإجراء.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>إلغاء</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => deleteMutation.mutate(task.id)}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                          >\n                            حذف\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14451},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-spinner.tsx":{"content":"import { Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function LoadingSpinner({ className, size = \"md\" }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-6 w-6\",\n    lg: \"h-8 w-8\",\n  };\n\n  return (\n    <div className=\"flex items-center justify-center\">\n      <Loader2 className={cn(\"animate-spin\", sizeClasses[size], className)} />\n    </div>\n  );\n}\n","size_bytes":493},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X, CheckCircle, AlertCircle, Info, AlertTriangle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-xl border-0 p-6 pr-8 shadow-2xl backdrop-blur-none transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-100 dark:border-gray-700\",\n        destructive: \"bg-red-600 text-white shadow-red-200 dark:shadow-red-900/20\",\n        success: \"bg-green-600 text-white shadow-green-200 dark:shadow-green-900/20\",\n        warning: \"bg-yellow-600 text-white shadow-yellow-200 dark:shadow-yellow-900/20\",\n        info: \"bg-blue-600 text-white shadow-blue-200 dark:shadow-blue-900/20\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  const getIcon = () => {\n    switch (variant) {\n      case \"success\":\n        return <CheckCircle className=\"h-5 w-5 text-white flex-shrink-0\" />\n      case \"destructive\":\n        return <AlertCircle className=\"h-5 w-5 text-white flex-shrink-0\" />\n      case \"warning\":\n        return <AlertTriangle className=\"h-5 w-5 text-white flex-shrink-0\" />\n      case \"info\":\n        return <Info className=\"h-5 w-5 text-white flex-shrink-0\" />\n      default:\n        return <Info className=\"h-5 w-5 text-gray-500 dark:text-gray-400 flex-shrink-0\" />\n    }\n  }\n\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    >\n      <div className=\"flex items-start space-x-3 w-full\">\n        {getIcon()}\n        <div className=\"flex-1 min-w-0\">\n          {props.children}\n        </div>\n      </div>\n    </ToastPrimitives.Root>\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-lg border-0 bg-gray-100 dark:bg-gray-700 px-3 text-sm font-medium transition-colors hover:bg-gray-200 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:bg-red-500/20 group-[.destructive]:hover:bg-red-500/30 group-[.destructive]:text-red-100 group-[.destructive]:hover:text-white group-[.success]:bg-green-500/20 group-[.success]:hover:bg-green-500/30 group-[.success]:text-green-100 group-[.success]:hover:text-white group-[.warning]:bg-yellow-500/20 group-[.warning]:hover:bg-yellow-500/30 group-[.warning]:text-yellow-100 group-[.warning]:hover:text-white group-[.info]:bg-blue-500/20 group-[.info]:hover:bg-blue-500/30 group-[.info]:text-blue-100 group-[.info]:hover:text-white\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-lg p-1.5 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all focus:opacity-100 focus:outline-none focus:ring-2 focus:ring-primary-500 group-[.destructive]:text-red-200 group-[.destructive]:hover:text-white group-[.destructive]:hover:bg-red-500/20 group-[.destructive]:focus:ring-red-400 group-[.success]:text-green-200 group-[.success]:hover:text-white group-[.success]:hover:bg-green-500/20 group-[.success]:focus:ring-green-400 group-[.warning]:text-yellow-200 group-[.warning]:hover:text-white group-[.warning]:hover:bg-yellow-500/20 group-[.warning]:focus:ring-yellow-400 group-[.info]:text-blue-200 group-[.info]:hover:text-white group-[.info]:hover:bg-blue-500/20 group-[.info]:focus:ring-blue-400\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold text-gray-900 dark:text-white group-[.destructive]:text-white group-[.success]:text-white group-[.warning]:text-white group-[.info]:text-white\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm text-gray-600 dark:text-gray-300 group-[.destructive]:text-red-100 group-[.success]:text-green-100 group-[.warning]:text-yellow-100 group-[.info]:text-blue-100\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":7069},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}